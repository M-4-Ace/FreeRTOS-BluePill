
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c84  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08002d94  08002d94  00012d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002e04  08002e04  00012e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002e08  08002e08  00012e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  08002e0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002214  20000024  08002e30  00020024  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20002238  08002e30  00022238  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001cb1a  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003bf6  00000000  00000000  0003cb67  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a2a0  00000000  00000000  0004075d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000e10  00000000  00000000  0004aa00  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001310  00000000  00000000  0004b810  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007ac6  00000000  00000000  0004cb20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000552c  00000000  00000000  000545e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00059b12  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000028c0  00000000  00000000  00059b90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000024 	.word	0x20000024
 800012c:	00000000 	.word	0x00000000
 8000130:	08002d7c 	.word	0x08002d7c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000028 	.word	0x20000028
 800014c:	08002d7c 	.word	0x08002d7c

08000150 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4a07      	ldr	r2, [pc, #28]	; (8000170 <HAL_Init+0x20>)
{
 8000152:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000154:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000156:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000158:	f043 0310 	orr.w	r3, r3, #16
 800015c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015e:	f000 f81b 	bl	8000198 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f002 fd3a 	bl	8002bdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 fccc 	bl	8002b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800016c:	2000      	movs	r0, #0
 800016e:	bd08      	pop	{r3, pc}
 8000170:	40022000 	.word	0x40022000

08000174 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000174:	4a03      	ldr	r2, [pc, #12]	; (8000184 <HAL_IncTick+0x10>)
 8000176:	4b04      	ldr	r3, [pc, #16]	; (8000188 <HAL_IncTick+0x14>)
 8000178:	6811      	ldr	r1, [r2, #0]
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	440b      	add	r3, r1
 800017e:	6013      	str	r3, [r2, #0]
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	20002168 	.word	0x20002168
 8000188:	20000000 	.word	0x20000000

0800018c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800018c:	4b01      	ldr	r3, [pc, #4]	; (8000194 <HAL_GetTick+0x8>)
 800018e:	6818      	ldr	r0, [r3, #0]
}
 8000190:	4770      	bx	lr
 8000192:	bf00      	nop
 8000194:	20002168 	.word	0x20002168

08000198 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000198:	4a07      	ldr	r2, [pc, #28]	; (80001b8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800019a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800019c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800019e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001a6:	041b      	lsls	r3, r3, #16
 80001a8:	0c1b      	lsrs	r3, r3, #16
 80001aa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001b2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001b4:	60d3      	str	r3, [r2, #12]
 80001b6:	4770      	bx	lr
 80001b8:	e000ed00 	.word	0xe000ed00

080001bc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001bc:	4b17      	ldr	r3, [pc, #92]	; (800021c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80001be:	b530      	push	{r4, r5, lr}
 80001c0:	68dc      	ldr	r4, [r3, #12]
 80001c2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80001c6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001ca:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80001cc:	2b04      	cmp	r3, #4
 80001ce:	bf28      	it	cs
 80001d0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001d2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80001d4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001d8:	bf98      	it	ls
 80001da:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80001dc:	fa05 f303 	lsl.w	r3, r5, r3
 80001e0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001e4:	bf88      	it	hi
 80001e6:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80001e8:	4019      	ands	r1, r3
 80001ea:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80001ec:	fa05 f404 	lsl.w	r4, r5, r4
 80001f0:	3c01      	subs	r4, #1
 80001f2:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80001f4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80001f6:	ea42 0201 	orr.w	r2, r2, r1
 80001fa:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001fe:	bfaf      	iteee	ge
 8000200:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000204:	4b06      	ldrlt	r3, [pc, #24]	; (8000220 <HAL_NVIC_SetPriority+0x64>)
 8000206:	f000 000f 	andlt.w	r0, r0, #15
 800020a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800020c:	bfa5      	ittet	ge
 800020e:	b2d2      	uxtbge	r2, r2
 8000210:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000214:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000216:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800021a:	bd30      	pop	{r4, r5, pc}
 800021c:	e000ed00 	.word	0xe000ed00
 8000220:	e000ed14 	.word	0xe000ed14

08000224 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000224:	2301      	movs	r3, #1
 8000226:	0942      	lsrs	r2, r0, #5
 8000228:	f000 001f 	and.w	r0, r0, #31
 800022c:	fa03 f000 	lsl.w	r0, r3, r0
 8000230:	4b01      	ldr	r3, [pc, #4]	; (8000238 <HAL_NVIC_EnableIRQ+0x14>)
 8000232:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000236:	4770      	bx	lr
 8000238:	e000e100 	.word	0xe000e100

0800023c <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800023c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8000240:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000242:	2b02      	cmp	r3, #2
 8000244:	d003      	beq.n	800024e <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000246:	2304      	movs	r3, #4
 8000248:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800024a:	2001      	movs	r0, #1
 800024c:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800024e:	6803      	ldr	r3, [r0, #0]
 8000250:	681a      	ldr	r2, [r3, #0]
 8000252:	f022 020e 	bic.w	r2, r2, #14
 8000256:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	f022 0201 	bic.w	r2, r2, #1
 800025e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000260:	4a18      	ldr	r2, [pc, #96]	; (80002c4 <HAL_DMA_Abort_IT+0x88>)
 8000262:	4293      	cmp	r3, r2
 8000264:	d01f      	beq.n	80002a6 <HAL_DMA_Abort_IT+0x6a>
 8000266:	3214      	adds	r2, #20
 8000268:	4293      	cmp	r3, r2
 800026a:	d01e      	beq.n	80002aa <HAL_DMA_Abort_IT+0x6e>
 800026c:	3214      	adds	r2, #20
 800026e:	4293      	cmp	r3, r2
 8000270:	d01d      	beq.n	80002ae <HAL_DMA_Abort_IT+0x72>
 8000272:	3214      	adds	r2, #20
 8000274:	4293      	cmp	r3, r2
 8000276:	d01d      	beq.n	80002b4 <HAL_DMA_Abort_IT+0x78>
 8000278:	3214      	adds	r2, #20
 800027a:	4293      	cmp	r3, r2
 800027c:	d01d      	beq.n	80002ba <HAL_DMA_Abort_IT+0x7e>
 800027e:	3214      	adds	r2, #20
 8000280:	4293      	cmp	r3, r2
 8000282:	bf0c      	ite	eq
 8000284:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8000288:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 800028c:	4a0e      	ldr	r2, [pc, #56]	; (80002c8 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800028e:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000290:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000292:	2301      	movs	r3, #1
 8000294:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000298:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800029a:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800029e:	b17b      	cbz	r3, 80002c0 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 80002a0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80002a2:	4620      	mov	r0, r4
 80002a4:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80002a6:	2301      	movs	r3, #1
 80002a8:	e7f0      	b.n	800028c <HAL_DMA_Abort_IT+0x50>
 80002aa:	2310      	movs	r3, #16
 80002ac:	e7ee      	b.n	800028c <HAL_DMA_Abort_IT+0x50>
 80002ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002b2:	e7eb      	b.n	800028c <HAL_DMA_Abort_IT+0x50>
 80002b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002b8:	e7e8      	b.n	800028c <HAL_DMA_Abort_IT+0x50>
 80002ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002be:	e7e5      	b.n	800028c <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80002c0:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	40020008 	.word	0x40020008
 80002c8:	40020000 	.word	0x40020000

080002cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002d0:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002d2:	4616      	mov	r6, r2
 80002d4:	4b65      	ldr	r3, [pc, #404]	; (800046c <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002d6:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800047c <HAL_GPIO_Init+0x1b0>
 80002da:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000480 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002de:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002e2:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002e4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002e8:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002ec:	45a0      	cmp	r8, r4
 80002ee:	d17f      	bne.n	80003f0 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80002f0:	684d      	ldr	r5, [r1, #4]
 80002f2:	2d12      	cmp	r5, #18
 80002f4:	f000 80af 	beq.w	8000456 <HAL_GPIO_Init+0x18a>
 80002f8:	f200 8088 	bhi.w	800040c <HAL_GPIO_Init+0x140>
 80002fc:	2d02      	cmp	r5, #2
 80002fe:	f000 80a7 	beq.w	8000450 <HAL_GPIO_Init+0x184>
 8000302:	d87c      	bhi.n	80003fe <HAL_GPIO_Init+0x132>
 8000304:	2d00      	cmp	r5, #0
 8000306:	f000 808e 	beq.w	8000426 <HAL_GPIO_Init+0x15a>
 800030a:	2d01      	cmp	r5, #1
 800030c:	f000 809e 	beq.w	800044c <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000310:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000314:	2cff      	cmp	r4, #255	; 0xff
 8000316:	bf93      	iteet	ls
 8000318:	4682      	movls	sl, r0
 800031a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800031e:	3d08      	subhi	r5, #8
 8000320:	f8d0 b000 	ldrls.w	fp, [r0]
 8000324:	bf92      	itee	ls
 8000326:	00b5      	lslls	r5, r6, #2
 8000328:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800032c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800032e:	fa09 f805 	lsl.w	r8, r9, r5
 8000332:	ea2b 0808 	bic.w	r8, fp, r8
 8000336:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800033a:	bf88      	it	hi
 800033c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000340:	ea48 0505 	orr.w	r5, r8, r5
 8000344:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000348:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800034c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000350:	d04e      	beq.n	80003f0 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000352:	4d47      	ldr	r5, [pc, #284]	; (8000470 <HAL_GPIO_Init+0x1a4>)
 8000354:	4f46      	ldr	r7, [pc, #280]	; (8000470 <HAL_GPIO_Init+0x1a4>)
 8000356:	69ad      	ldr	r5, [r5, #24]
 8000358:	f026 0803 	bic.w	r8, r6, #3
 800035c:	f045 0501 	orr.w	r5, r5, #1
 8000360:	61bd      	str	r5, [r7, #24]
 8000362:	69bd      	ldr	r5, [r7, #24]
 8000364:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000368:	f005 0501 	and.w	r5, r5, #1
 800036c:	9501      	str	r5, [sp, #4]
 800036e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000372:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000376:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000378:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 800037c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000380:	fa09 f90b 	lsl.w	r9, r9, fp
 8000384:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000388:	4d3a      	ldr	r5, [pc, #232]	; (8000474 <HAL_GPIO_Init+0x1a8>)
 800038a:	42a8      	cmp	r0, r5
 800038c:	d068      	beq.n	8000460 <HAL_GPIO_Init+0x194>
 800038e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000392:	42a8      	cmp	r0, r5
 8000394:	d066      	beq.n	8000464 <HAL_GPIO_Init+0x198>
 8000396:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800039a:	42a8      	cmp	r0, r5
 800039c:	d064      	beq.n	8000468 <HAL_GPIO_Init+0x19c>
 800039e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003a2:	42a8      	cmp	r0, r5
 80003a4:	bf0c      	ite	eq
 80003a6:	2503      	moveq	r5, #3
 80003a8:	2504      	movne	r5, #4
 80003aa:	fa05 f50b 	lsl.w	r5, r5, fp
 80003ae:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80003b2:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003b6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003b8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003bc:	bf14      	ite	ne
 80003be:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003c0:	43a5      	biceq	r5, r4
 80003c2:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003c4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003c6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003ca:	bf14      	ite	ne
 80003cc:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003ce:	43a5      	biceq	r5, r4
 80003d0:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003d2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003d4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003d8:	bf14      	ite	ne
 80003da:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003dc:	43a5      	biceq	r5, r4
 80003de:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003e0:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003e2:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003e6:	bf14      	ite	ne
 80003e8:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003ea:	ea25 0404 	biceq.w	r4, r5, r4
 80003ee:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003f0:	3601      	adds	r6, #1
 80003f2:	2e10      	cmp	r6, #16
 80003f4:	f47f af73 	bne.w	80002de <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80003f8:	b003      	add	sp, #12
 80003fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80003fe:	2d03      	cmp	r5, #3
 8000400:	d022      	beq.n	8000448 <HAL_GPIO_Init+0x17c>
 8000402:	2d11      	cmp	r5, #17
 8000404:	d184      	bne.n	8000310 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000406:	68ca      	ldr	r2, [r1, #12]
 8000408:	3204      	adds	r2, #4
          break;
 800040a:	e781      	b.n	8000310 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800040c:	4f1a      	ldr	r7, [pc, #104]	; (8000478 <HAL_GPIO_Init+0x1ac>)
 800040e:	42bd      	cmp	r5, r7
 8000410:	d009      	beq.n	8000426 <HAL_GPIO_Init+0x15a>
 8000412:	d812      	bhi.n	800043a <HAL_GPIO_Init+0x16e>
 8000414:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000484 <HAL_GPIO_Init+0x1b8>
 8000418:	454d      	cmp	r5, r9
 800041a:	d004      	beq.n	8000426 <HAL_GPIO_Init+0x15a>
 800041c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000420:	454d      	cmp	r5, r9
 8000422:	f47f af75 	bne.w	8000310 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000426:	688a      	ldr	r2, [r1, #8]
 8000428:	b1c2      	cbz	r2, 800045c <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800042a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800042c:	bf0c      	ite	eq
 800042e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000432:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000436:	2208      	movs	r2, #8
 8000438:	e76a      	b.n	8000310 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800043a:	4575      	cmp	r5, lr
 800043c:	d0f3      	beq.n	8000426 <HAL_GPIO_Init+0x15a>
 800043e:	4565      	cmp	r5, ip
 8000440:	d0f1      	beq.n	8000426 <HAL_GPIO_Init+0x15a>
 8000442:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000488 <HAL_GPIO_Init+0x1bc>
 8000446:	e7eb      	b.n	8000420 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000448:	2200      	movs	r2, #0
 800044a:	e761      	b.n	8000310 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800044c:	68ca      	ldr	r2, [r1, #12]
          break;
 800044e:	e75f      	b.n	8000310 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000450:	68ca      	ldr	r2, [r1, #12]
 8000452:	3208      	adds	r2, #8
          break;
 8000454:	e75c      	b.n	8000310 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000456:	68ca      	ldr	r2, [r1, #12]
 8000458:	320c      	adds	r2, #12
          break;
 800045a:	e759      	b.n	8000310 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800045c:	2204      	movs	r2, #4
 800045e:	e757      	b.n	8000310 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000460:	2500      	movs	r5, #0
 8000462:	e7a2      	b.n	80003aa <HAL_GPIO_Init+0xde>
 8000464:	2501      	movs	r5, #1
 8000466:	e7a0      	b.n	80003aa <HAL_GPIO_Init+0xde>
 8000468:	2502      	movs	r5, #2
 800046a:	e79e      	b.n	80003aa <HAL_GPIO_Init+0xde>
 800046c:	40010400 	.word	0x40010400
 8000470:	40021000 	.word	0x40021000
 8000474:	40010800 	.word	0x40010800
 8000478:	10210000 	.word	0x10210000
 800047c:	10310000 	.word	0x10310000
 8000480:	10320000 	.word	0x10320000
 8000484:	10110000 	.word	0x10110000
 8000488:	10220000 	.word	0x10220000

0800048c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800048c:	b10a      	cbz	r2, 8000492 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800048e:	6101      	str	r1, [r0, #16]
 8000490:	4770      	bx	lr
 8000492:	0409      	lsls	r1, r1, #16
 8000494:	e7fb      	b.n	800048e <HAL_GPIO_WritePin+0x2>

08000496 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000496:	68c3      	ldr	r3, [r0, #12]
 8000498:	4059      	eors	r1, r3
 800049a:	60c1      	str	r1, [r0, #12]
 800049c:	4770      	bx	lr
	...

080004a0 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004a0:	6803      	ldr	r3, [r0, #0]
{
 80004a2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004a6:	07db      	lsls	r3, r3, #31
{
 80004a8:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004aa:	d410      	bmi.n	80004ce <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004ac:	682b      	ldr	r3, [r5, #0]
 80004ae:	079f      	lsls	r7, r3, #30
 80004b0:	d45e      	bmi.n	8000570 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004b2:	682b      	ldr	r3, [r5, #0]
 80004b4:	0719      	lsls	r1, r3, #28
 80004b6:	f100 8095 	bmi.w	80005e4 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004ba:	682b      	ldr	r3, [r5, #0]
 80004bc:	075a      	lsls	r2, r3, #29
 80004be:	f100 80bf 	bmi.w	8000640 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004c2:	69ea      	ldr	r2, [r5, #28]
 80004c4:	2a00      	cmp	r2, #0
 80004c6:	f040 812d 	bne.w	8000724 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80004ca:	2000      	movs	r0, #0
 80004cc:	e014      	b.n	80004f8 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004ce:	4c90      	ldr	r4, [pc, #576]	; (8000710 <HAL_RCC_OscConfig+0x270>)
 80004d0:	6863      	ldr	r3, [r4, #4]
 80004d2:	f003 030c 	and.w	r3, r3, #12
 80004d6:	2b04      	cmp	r3, #4
 80004d8:	d007      	beq.n	80004ea <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004da:	6863      	ldr	r3, [r4, #4]
 80004dc:	f003 030c 	and.w	r3, r3, #12
 80004e0:	2b08      	cmp	r3, #8
 80004e2:	d10c      	bne.n	80004fe <HAL_RCC_OscConfig+0x5e>
 80004e4:	6863      	ldr	r3, [r4, #4]
 80004e6:	03de      	lsls	r6, r3, #15
 80004e8:	d509      	bpl.n	80004fe <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004ea:	6823      	ldr	r3, [r4, #0]
 80004ec:	039c      	lsls	r4, r3, #14
 80004ee:	d5dd      	bpl.n	80004ac <HAL_RCC_OscConfig+0xc>
 80004f0:	686b      	ldr	r3, [r5, #4]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d1da      	bne.n	80004ac <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80004f6:	2001      	movs	r0, #1
}
 80004f8:	b002      	add	sp, #8
 80004fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004fe:	686b      	ldr	r3, [r5, #4]
 8000500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000504:	d110      	bne.n	8000528 <HAL_RCC_OscConfig+0x88>
 8000506:	6823      	ldr	r3, [r4, #0]
 8000508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800050c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800050e:	f7ff fe3d 	bl	800018c <HAL_GetTick>
 8000512:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000514:	6823      	ldr	r3, [r4, #0]
 8000516:	0398      	lsls	r0, r3, #14
 8000518:	d4c8      	bmi.n	80004ac <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800051a:	f7ff fe37 	bl	800018c <HAL_GetTick>
 800051e:	1b80      	subs	r0, r0, r6
 8000520:	2864      	cmp	r0, #100	; 0x64
 8000522:	d9f7      	bls.n	8000514 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000524:	2003      	movs	r0, #3
 8000526:	e7e7      	b.n	80004f8 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000528:	b99b      	cbnz	r3, 8000552 <HAL_RCC_OscConfig+0xb2>
 800052a:	6823      	ldr	r3, [r4, #0]
 800052c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000530:	6023      	str	r3, [r4, #0]
 8000532:	6823      	ldr	r3, [r4, #0]
 8000534:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000538:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800053a:	f7ff fe27 	bl	800018c <HAL_GetTick>
 800053e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000540:	6823      	ldr	r3, [r4, #0]
 8000542:	0399      	lsls	r1, r3, #14
 8000544:	d5b2      	bpl.n	80004ac <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000546:	f7ff fe21 	bl	800018c <HAL_GetTick>
 800054a:	1b80      	subs	r0, r0, r6
 800054c:	2864      	cmp	r0, #100	; 0x64
 800054e:	d9f7      	bls.n	8000540 <HAL_RCC_OscConfig+0xa0>
 8000550:	e7e8      	b.n	8000524 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000552:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000556:	6823      	ldr	r3, [r4, #0]
 8000558:	d103      	bne.n	8000562 <HAL_RCC_OscConfig+0xc2>
 800055a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800055e:	6023      	str	r3, [r4, #0]
 8000560:	e7d1      	b.n	8000506 <HAL_RCC_OscConfig+0x66>
 8000562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000566:	6023      	str	r3, [r4, #0]
 8000568:	6823      	ldr	r3, [r4, #0]
 800056a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800056e:	e7cd      	b.n	800050c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000570:	4c67      	ldr	r4, [pc, #412]	; (8000710 <HAL_RCC_OscConfig+0x270>)
 8000572:	6863      	ldr	r3, [r4, #4]
 8000574:	f013 0f0c 	tst.w	r3, #12
 8000578:	d007      	beq.n	800058a <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800057a:	6863      	ldr	r3, [r4, #4]
 800057c:	f003 030c 	and.w	r3, r3, #12
 8000580:	2b08      	cmp	r3, #8
 8000582:	d110      	bne.n	80005a6 <HAL_RCC_OscConfig+0x106>
 8000584:	6863      	ldr	r3, [r4, #4]
 8000586:	03da      	lsls	r2, r3, #15
 8000588:	d40d      	bmi.n	80005a6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800058a:	6823      	ldr	r3, [r4, #0]
 800058c:	079b      	lsls	r3, r3, #30
 800058e:	d502      	bpl.n	8000596 <HAL_RCC_OscConfig+0xf6>
 8000590:	692b      	ldr	r3, [r5, #16]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d1af      	bne.n	80004f6 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000596:	6823      	ldr	r3, [r4, #0]
 8000598:	696a      	ldr	r2, [r5, #20]
 800059a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800059e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80005a2:	6023      	str	r3, [r4, #0]
 80005a4:	e785      	b.n	80004b2 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005a6:	692a      	ldr	r2, [r5, #16]
 80005a8:	4b5a      	ldr	r3, [pc, #360]	; (8000714 <HAL_RCC_OscConfig+0x274>)
 80005aa:	b16a      	cbz	r2, 80005c8 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80005ac:	2201      	movs	r2, #1
 80005ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005b0:	f7ff fdec 	bl	800018c <HAL_GetTick>
 80005b4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005b6:	6823      	ldr	r3, [r4, #0]
 80005b8:	079f      	lsls	r7, r3, #30
 80005ba:	d4ec      	bmi.n	8000596 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005bc:	f7ff fde6 	bl	800018c <HAL_GetTick>
 80005c0:	1b80      	subs	r0, r0, r6
 80005c2:	2802      	cmp	r0, #2
 80005c4:	d9f7      	bls.n	80005b6 <HAL_RCC_OscConfig+0x116>
 80005c6:	e7ad      	b.n	8000524 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80005c8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005ca:	f7ff fddf 	bl	800018c <HAL_GetTick>
 80005ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005d0:	6823      	ldr	r3, [r4, #0]
 80005d2:	0798      	lsls	r0, r3, #30
 80005d4:	f57f af6d 	bpl.w	80004b2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005d8:	f7ff fdd8 	bl	800018c <HAL_GetTick>
 80005dc:	1b80      	subs	r0, r0, r6
 80005de:	2802      	cmp	r0, #2
 80005e0:	d9f6      	bls.n	80005d0 <HAL_RCC_OscConfig+0x130>
 80005e2:	e79f      	b.n	8000524 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005e4:	69aa      	ldr	r2, [r5, #24]
 80005e6:	4c4a      	ldr	r4, [pc, #296]	; (8000710 <HAL_RCC_OscConfig+0x270>)
 80005e8:	4b4b      	ldr	r3, [pc, #300]	; (8000718 <HAL_RCC_OscConfig+0x278>)
 80005ea:	b1da      	cbz	r2, 8000624 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80005ec:	2201      	movs	r2, #1
 80005ee:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005f0:	f7ff fdcc 	bl	800018c <HAL_GetTick>
 80005f4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80005f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80005f8:	079b      	lsls	r3, r3, #30
 80005fa:	d50d      	bpl.n	8000618 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80005fc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000600:	4b46      	ldr	r3, [pc, #280]	; (800071c <HAL_RCC_OscConfig+0x27c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	fbb3 f3f2 	udiv	r3, r3, r2
 8000608:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800060a:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800060c:	9b01      	ldr	r3, [sp, #4]
 800060e:	1e5a      	subs	r2, r3, #1
 8000610:	9201      	str	r2, [sp, #4]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d1f9      	bne.n	800060a <HAL_RCC_OscConfig+0x16a>
 8000616:	e750      	b.n	80004ba <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000618:	f7ff fdb8 	bl	800018c <HAL_GetTick>
 800061c:	1b80      	subs	r0, r0, r6
 800061e:	2802      	cmp	r0, #2
 8000620:	d9e9      	bls.n	80005f6 <HAL_RCC_OscConfig+0x156>
 8000622:	e77f      	b.n	8000524 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000624:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000626:	f7ff fdb1 	bl	800018c <HAL_GetTick>
 800062a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800062c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800062e:	079f      	lsls	r7, r3, #30
 8000630:	f57f af43 	bpl.w	80004ba <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000634:	f7ff fdaa 	bl	800018c <HAL_GetTick>
 8000638:	1b80      	subs	r0, r0, r6
 800063a:	2802      	cmp	r0, #2
 800063c:	d9f6      	bls.n	800062c <HAL_RCC_OscConfig+0x18c>
 800063e:	e771      	b.n	8000524 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000640:	4c33      	ldr	r4, [pc, #204]	; (8000710 <HAL_RCC_OscConfig+0x270>)
 8000642:	69e3      	ldr	r3, [r4, #28]
 8000644:	00d8      	lsls	r0, r3, #3
 8000646:	d424      	bmi.n	8000692 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000648:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800064a:	69e3      	ldr	r3, [r4, #28]
 800064c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000650:	61e3      	str	r3, [r4, #28]
 8000652:	69e3      	ldr	r3, [r4, #28]
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800065c:	4e30      	ldr	r6, [pc, #192]	; (8000720 <HAL_RCC_OscConfig+0x280>)
 800065e:	6833      	ldr	r3, [r6, #0]
 8000660:	05d9      	lsls	r1, r3, #23
 8000662:	d518      	bpl.n	8000696 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000664:	68eb      	ldr	r3, [r5, #12]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d126      	bne.n	80006b8 <HAL_RCC_OscConfig+0x218>
 800066a:	6a23      	ldr	r3, [r4, #32]
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000672:	f7ff fd8b 	bl	800018c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000676:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800067a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800067c:	6a23      	ldr	r3, [r4, #32]
 800067e:	079b      	lsls	r3, r3, #30
 8000680:	d53f      	bpl.n	8000702 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000682:	2f00      	cmp	r7, #0
 8000684:	f43f af1d 	beq.w	80004c2 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000688:	69e3      	ldr	r3, [r4, #28]
 800068a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800068e:	61e3      	str	r3, [r4, #28]
 8000690:	e717      	b.n	80004c2 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000692:	2700      	movs	r7, #0
 8000694:	e7e2      	b.n	800065c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000696:	6833      	ldr	r3, [r6, #0]
 8000698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800069c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800069e:	f7ff fd75 	bl	800018c <HAL_GetTick>
 80006a2:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006a4:	6833      	ldr	r3, [r6, #0]
 80006a6:	05da      	lsls	r2, r3, #23
 80006a8:	d4dc      	bmi.n	8000664 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80006aa:	f7ff fd6f 	bl	800018c <HAL_GetTick>
 80006ae:	eba0 0008 	sub.w	r0, r0, r8
 80006b2:	2864      	cmp	r0, #100	; 0x64
 80006b4:	d9f6      	bls.n	80006a4 <HAL_RCC_OscConfig+0x204>
 80006b6:	e735      	b.n	8000524 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006b8:	b9ab      	cbnz	r3, 80006e6 <HAL_RCC_OscConfig+0x246>
 80006ba:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006bc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006c0:	f023 0301 	bic.w	r3, r3, #1
 80006c4:	6223      	str	r3, [r4, #32]
 80006c6:	6a23      	ldr	r3, [r4, #32]
 80006c8:	f023 0304 	bic.w	r3, r3, #4
 80006cc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006ce:	f7ff fd5d 	bl	800018c <HAL_GetTick>
 80006d2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006d4:	6a23      	ldr	r3, [r4, #32]
 80006d6:	0798      	lsls	r0, r3, #30
 80006d8:	d5d3      	bpl.n	8000682 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006da:	f7ff fd57 	bl	800018c <HAL_GetTick>
 80006de:	1b80      	subs	r0, r0, r6
 80006e0:	4540      	cmp	r0, r8
 80006e2:	d9f7      	bls.n	80006d4 <HAL_RCC_OscConfig+0x234>
 80006e4:	e71e      	b.n	8000524 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006e6:	2b05      	cmp	r3, #5
 80006e8:	6a23      	ldr	r3, [r4, #32]
 80006ea:	d103      	bne.n	80006f4 <HAL_RCC_OscConfig+0x254>
 80006ec:	f043 0304 	orr.w	r3, r3, #4
 80006f0:	6223      	str	r3, [r4, #32]
 80006f2:	e7ba      	b.n	800066a <HAL_RCC_OscConfig+0x1ca>
 80006f4:	f023 0301 	bic.w	r3, r3, #1
 80006f8:	6223      	str	r3, [r4, #32]
 80006fa:	6a23      	ldr	r3, [r4, #32]
 80006fc:	f023 0304 	bic.w	r3, r3, #4
 8000700:	e7b6      	b.n	8000670 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000702:	f7ff fd43 	bl	800018c <HAL_GetTick>
 8000706:	eba0 0008 	sub.w	r0, r0, r8
 800070a:	42b0      	cmp	r0, r6
 800070c:	d9b6      	bls.n	800067c <HAL_RCC_OscConfig+0x1dc>
 800070e:	e709      	b.n	8000524 <HAL_RCC_OscConfig+0x84>
 8000710:	40021000 	.word	0x40021000
 8000714:	42420000 	.word	0x42420000
 8000718:	42420480 	.word	0x42420480
 800071c:	20000020 	.word	0x20000020
 8000720:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000724:	4c22      	ldr	r4, [pc, #136]	; (80007b0 <HAL_RCC_OscConfig+0x310>)
 8000726:	6863      	ldr	r3, [r4, #4]
 8000728:	f003 030c 	and.w	r3, r3, #12
 800072c:	2b08      	cmp	r3, #8
 800072e:	f43f aee2 	beq.w	80004f6 <HAL_RCC_OscConfig+0x56>
 8000732:	2300      	movs	r3, #0
 8000734:	4e1f      	ldr	r6, [pc, #124]	; (80007b4 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000736:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000738:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800073a:	d12b      	bne.n	8000794 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800073c:	f7ff fd26 	bl	800018c <HAL_GetTick>
 8000740:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000742:	6823      	ldr	r3, [r4, #0]
 8000744:	0199      	lsls	r1, r3, #6
 8000746:	d41f      	bmi.n	8000788 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000748:	6a2b      	ldr	r3, [r5, #32]
 800074a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800074e:	d105      	bne.n	800075c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000750:	6862      	ldr	r2, [r4, #4]
 8000752:	68a9      	ldr	r1, [r5, #8]
 8000754:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000758:	430a      	orrs	r2, r1
 800075a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800075c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800075e:	6862      	ldr	r2, [r4, #4]
 8000760:	430b      	orrs	r3, r1
 8000762:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000766:	4313      	orrs	r3, r2
 8000768:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800076a:	2301      	movs	r3, #1
 800076c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800076e:	f7ff fd0d 	bl	800018c <HAL_GetTick>
 8000772:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000774:	6823      	ldr	r3, [r4, #0]
 8000776:	019a      	lsls	r2, r3, #6
 8000778:	f53f aea7 	bmi.w	80004ca <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800077c:	f7ff fd06 	bl	800018c <HAL_GetTick>
 8000780:	1b40      	subs	r0, r0, r5
 8000782:	2802      	cmp	r0, #2
 8000784:	d9f6      	bls.n	8000774 <HAL_RCC_OscConfig+0x2d4>
 8000786:	e6cd      	b.n	8000524 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000788:	f7ff fd00 	bl	800018c <HAL_GetTick>
 800078c:	1bc0      	subs	r0, r0, r7
 800078e:	2802      	cmp	r0, #2
 8000790:	d9d7      	bls.n	8000742 <HAL_RCC_OscConfig+0x2a2>
 8000792:	e6c7      	b.n	8000524 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000794:	f7ff fcfa 	bl	800018c <HAL_GetTick>
 8000798:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800079a:	6823      	ldr	r3, [r4, #0]
 800079c:	019b      	lsls	r3, r3, #6
 800079e:	f57f ae94 	bpl.w	80004ca <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007a2:	f7ff fcf3 	bl	800018c <HAL_GetTick>
 80007a6:	1b40      	subs	r0, r0, r5
 80007a8:	2802      	cmp	r0, #2
 80007aa:	d9f6      	bls.n	800079a <HAL_RCC_OscConfig+0x2fa>
 80007ac:	e6ba      	b.n	8000524 <HAL_RCC_OscConfig+0x84>
 80007ae:	bf00      	nop
 80007b0:	40021000 	.word	0x40021000
 80007b4:	42420060 	.word	0x42420060

080007b8 <HAL_RCC_GetSysClockFreq>:
{
 80007b8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007ba:	4b19      	ldr	r3, [pc, #100]	; (8000820 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80007bc:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007be:	ac02      	add	r4, sp, #8
 80007c0:	f103 0510 	add.w	r5, r3, #16
 80007c4:	4622      	mov	r2, r4
 80007c6:	6818      	ldr	r0, [r3, #0]
 80007c8:	6859      	ldr	r1, [r3, #4]
 80007ca:	3308      	adds	r3, #8
 80007cc:	c203      	stmia	r2!, {r0, r1}
 80007ce:	42ab      	cmp	r3, r5
 80007d0:	4614      	mov	r4, r2
 80007d2:	d1f7      	bne.n	80007c4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007d4:	2301      	movs	r3, #1
 80007d6:	f88d 3004 	strb.w	r3, [sp, #4]
 80007da:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80007dc:	4911      	ldr	r1, [pc, #68]	; (8000824 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007de:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80007e2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80007e4:	f003 020c 	and.w	r2, r3, #12
 80007e8:	2a08      	cmp	r2, #8
 80007ea:	d117      	bne.n	800081c <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007ec:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80007f0:	a806      	add	r0, sp, #24
 80007f2:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007f4:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007f6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007fa:	d50c      	bpl.n	8000816 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007fc:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007fe:	480a      	ldr	r0, [pc, #40]	; (8000828 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000800:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000804:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000806:	aa06      	add	r2, sp, #24
 8000808:	4413      	add	r3, r2
 800080a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800080e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000812:	b007      	add	sp, #28
 8000814:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <HAL_RCC_GetSysClockFreq+0x74>)
 8000818:	4350      	muls	r0, r2
 800081a:	e7fa      	b.n	8000812 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 800081c:	4802      	ldr	r0, [pc, #8]	; (8000828 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800081e:	e7f8      	b.n	8000812 <HAL_RCC_GetSysClockFreq+0x5a>
 8000820:	08002d94 	.word	0x08002d94
 8000824:	40021000 	.word	0x40021000
 8000828:	007a1200 	.word	0x007a1200
 800082c:	003d0900 	.word	0x003d0900

08000830 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000830:	4a54      	ldr	r2, [pc, #336]	; (8000984 <HAL_RCC_ClockConfig+0x154>)
{
 8000832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000836:	6813      	ldr	r3, [r2, #0]
{
 8000838:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800083a:	f003 0307 	and.w	r3, r3, #7
 800083e:	428b      	cmp	r3, r1
{
 8000840:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000842:	d32a      	bcc.n	800089a <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000844:	6829      	ldr	r1, [r5, #0]
 8000846:	078c      	lsls	r4, r1, #30
 8000848:	d434      	bmi.n	80008b4 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800084a:	07ca      	lsls	r2, r1, #31
 800084c:	d447      	bmi.n	80008de <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800084e:	4a4d      	ldr	r2, [pc, #308]	; (8000984 <HAL_RCC_ClockConfig+0x154>)
 8000850:	6813      	ldr	r3, [r2, #0]
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	429e      	cmp	r6, r3
 8000858:	f0c0 8082 	bcc.w	8000960 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800085c:	682a      	ldr	r2, [r5, #0]
 800085e:	4c4a      	ldr	r4, [pc, #296]	; (8000988 <HAL_RCC_ClockConfig+0x158>)
 8000860:	f012 0f04 	tst.w	r2, #4
 8000864:	f040 8087 	bne.w	8000976 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000868:	0713      	lsls	r3, r2, #28
 800086a:	d506      	bpl.n	800087a <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800086c:	6863      	ldr	r3, [r4, #4]
 800086e:	692a      	ldr	r2, [r5, #16]
 8000870:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000874:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000878:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800087a:	f7ff ff9d 	bl	80007b8 <HAL_RCC_GetSysClockFreq>
 800087e:	6863      	ldr	r3, [r4, #4]
 8000880:	4a42      	ldr	r2, [pc, #264]	; (800098c <HAL_RCC_ClockConfig+0x15c>)
 8000882:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000886:	5cd3      	ldrb	r3, [r2, r3]
 8000888:	40d8      	lsrs	r0, r3
 800088a:	4b41      	ldr	r3, [pc, #260]	; (8000990 <HAL_RCC_ClockConfig+0x160>)
 800088c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800088e:	2000      	movs	r0, #0
 8000890:	f002 f9a4 	bl	8002bdc <HAL_InitTick>
  return HAL_OK;
 8000894:	2000      	movs	r0, #0
}
 8000896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800089a:	6813      	ldr	r3, [r2, #0]
 800089c:	f023 0307 	bic.w	r3, r3, #7
 80008a0:	430b      	orrs	r3, r1
 80008a2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80008a4:	6813      	ldr	r3, [r2, #0]
 80008a6:	f003 0307 	and.w	r3, r3, #7
 80008aa:	4299      	cmp	r1, r3
 80008ac:	d0ca      	beq.n	8000844 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80008ae:	2001      	movs	r0, #1
 80008b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008b4:	4b34      	ldr	r3, [pc, #208]	; (8000988 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008b6:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80008ba:	bf1e      	ittt	ne
 80008bc:	685a      	ldrne	r2, [r3, #4]
 80008be:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80008c2:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008c4:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80008c6:	bf42      	ittt	mi
 80008c8:	685a      	ldrmi	r2, [r3, #4]
 80008ca:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80008ce:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008d0:	685a      	ldr	r2, [r3, #4]
 80008d2:	68a8      	ldr	r0, [r5, #8]
 80008d4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80008d8:	4302      	orrs	r2, r0
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	e7b5      	b.n	800084a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008de:	686a      	ldr	r2, [r5, #4]
 80008e0:	4c29      	ldr	r4, [pc, #164]	; (8000988 <HAL_RCC_ClockConfig+0x158>)
 80008e2:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008e4:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008e6:	d11c      	bne.n	8000922 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008e8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008ec:	d0df      	beq.n	80008ae <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008ee:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008f0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008f4:	f023 0303 	bic.w	r3, r3, #3
 80008f8:	4313      	orrs	r3, r2
 80008fa:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80008fc:	f7ff fc46 	bl	800018c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000900:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000902:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000904:	2b01      	cmp	r3, #1
 8000906:	d114      	bne.n	8000932 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000908:	6863      	ldr	r3, [r4, #4]
 800090a:	f003 030c 	and.w	r3, r3, #12
 800090e:	2b04      	cmp	r3, #4
 8000910:	d09d      	beq.n	800084e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000912:	f7ff fc3b 	bl	800018c <HAL_GetTick>
 8000916:	1bc0      	subs	r0, r0, r7
 8000918:	4540      	cmp	r0, r8
 800091a:	d9f5      	bls.n	8000908 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 800091c:	2003      	movs	r0, #3
 800091e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000922:	2a02      	cmp	r2, #2
 8000924:	d102      	bne.n	800092c <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000926:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800092a:	e7df      	b.n	80008ec <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800092c:	f013 0f02 	tst.w	r3, #2
 8000930:	e7dc      	b.n	80008ec <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000932:	2b02      	cmp	r3, #2
 8000934:	d10f      	bne.n	8000956 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000936:	6863      	ldr	r3, [r4, #4]
 8000938:	f003 030c 	and.w	r3, r3, #12
 800093c:	2b08      	cmp	r3, #8
 800093e:	d086      	beq.n	800084e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000940:	f7ff fc24 	bl	800018c <HAL_GetTick>
 8000944:	1bc0      	subs	r0, r0, r7
 8000946:	4540      	cmp	r0, r8
 8000948:	d9f5      	bls.n	8000936 <HAL_RCC_ClockConfig+0x106>
 800094a:	e7e7      	b.n	800091c <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800094c:	f7ff fc1e 	bl	800018c <HAL_GetTick>
 8000950:	1bc0      	subs	r0, r0, r7
 8000952:	4540      	cmp	r0, r8
 8000954:	d8e2      	bhi.n	800091c <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000956:	6863      	ldr	r3, [r4, #4]
 8000958:	f013 0f0c 	tst.w	r3, #12
 800095c:	d1f6      	bne.n	800094c <HAL_RCC_ClockConfig+0x11c>
 800095e:	e776      	b.n	800084e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000960:	6813      	ldr	r3, [r2, #0]
 8000962:	f023 0307 	bic.w	r3, r3, #7
 8000966:	4333      	orrs	r3, r6
 8000968:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800096a:	6813      	ldr	r3, [r2, #0]
 800096c:	f003 0307 	and.w	r3, r3, #7
 8000970:	429e      	cmp	r6, r3
 8000972:	d19c      	bne.n	80008ae <HAL_RCC_ClockConfig+0x7e>
 8000974:	e772      	b.n	800085c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000976:	6863      	ldr	r3, [r4, #4]
 8000978:	68e9      	ldr	r1, [r5, #12]
 800097a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800097e:	430b      	orrs	r3, r1
 8000980:	6063      	str	r3, [r4, #4]
 8000982:	e771      	b.n	8000868 <HAL_RCC_ClockConfig+0x38>
 8000984:	40022000 	.word	0x40022000
 8000988:	40021000 	.word	0x40021000
 800098c:	08002dea 	.word	0x08002dea
 8000990:	20000020 	.word	0x20000020

08000994 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000996:	4a05      	ldr	r2, [pc, #20]	; (80009ac <HAL_RCC_GetPCLK1Freq+0x18>)
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800099e:	5cd3      	ldrb	r3, [r2, r3]
 80009a0:	4a03      	ldr	r2, [pc, #12]	; (80009b0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80009a2:	6810      	ldr	r0, [r2, #0]
}    
 80009a4:	40d8      	lsrs	r0, r3
 80009a6:	4770      	bx	lr
 80009a8:	40021000 	.word	0x40021000
 80009ac:	08002dfa 	.word	0x08002dfa
 80009b0:	20000020 	.word	0x20000020

080009b4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80009b6:	4a05      	ldr	r2, [pc, #20]	; (80009cc <HAL_RCC_GetPCLK2Freq+0x18>)
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80009be:	5cd3      	ldrb	r3, [r2, r3]
 80009c0:	4a03      	ldr	r2, [pc, #12]	; (80009d0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80009c2:	6810      	ldr	r0, [r2, #0]
} 
 80009c4:	40d8      	lsrs	r0, r3
 80009c6:	4770      	bx	lr
 80009c8:	40021000 	.word	0x40021000
 80009cc:	08002dfa 	.word	0x08002dfa
 80009d0:	20000020 	.word	0x20000020

080009d4 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80009d4:	230f      	movs	r3, #15
 80009d6:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80009d8:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <HAL_RCC_GetClockConfig+0x34>)
 80009da:	685a      	ldr	r2, [r3, #4]
 80009dc:	f002 0203 	and.w	r2, r2, #3
 80009e0:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80009e2:	685a      	ldr	r2, [r3, #4]
 80009e4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80009e8:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80009ea:	685a      	ldr	r2, [r3, #4]
 80009ec:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80009f0:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	08db      	lsrs	r3, r3, #3
 80009f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80009fa:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <HAL_RCC_GetClockConfig+0x38>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f003 0307 	and.w	r3, r3, #7
 8000a04:	600b      	str	r3, [r1, #0]
 8000a06:	4770      	bx	lr
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40022000 	.word	0x40022000

08000a10 <HAL_TIM_Base_MspInit>:
 8000a10:	4770      	bx	lr

08000a12 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000a12:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8000a14:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000a16:	68da      	ldr	r2, [r3, #12]
 8000a18:	f042 0201 	orr.w	r2, r2, #1
 8000a1c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	f042 0201 	orr.w	r2, r2, #1
 8000a24:	601a      	str	r2, [r3, #0]
}
 8000a26:	4770      	bx	lr

08000a28 <HAL_TIM_OC_DelayElapsedCallback>:
 8000a28:	4770      	bx	lr

08000a2a <HAL_TIM_IC_CaptureCallback>:
 8000a2a:	4770      	bx	lr

08000a2c <HAL_TIM_PWM_PulseFinishedCallback>:
 8000a2c:	4770      	bx	lr

08000a2e <HAL_TIM_TriggerCallback>:
 8000a2e:	4770      	bx	lr

08000a30 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000a30:	6803      	ldr	r3, [r0, #0]
{
 8000a32:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000a34:	691a      	ldr	r2, [r3, #16]
{
 8000a36:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000a38:	0791      	lsls	r1, r2, #30
 8000a3a:	d50e      	bpl.n	8000a5a <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000a3c:	68da      	ldr	r2, [r3, #12]
 8000a3e:	0792      	lsls	r2, r2, #30
 8000a40:	d50b      	bpl.n	8000a5a <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000a42:	f06f 0202 	mvn.w	r2, #2
 8000a46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000a48:	2201      	movs	r2, #1

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000a4a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000a4c:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000a4e:	079b      	lsls	r3, r3, #30
 8000a50:	d077      	beq.n	8000b42 <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000a52:	f7ff ffea 	bl	8000a2a <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000a56:	2300      	movs	r3, #0
 8000a58:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000a5a:	6823      	ldr	r3, [r4, #0]
 8000a5c:	691a      	ldr	r2, [r3, #16]
 8000a5e:	0750      	lsls	r0, r2, #29
 8000a60:	d510      	bpl.n	8000a84 <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000a62:	68da      	ldr	r2, [r3, #12]
 8000a64:	0751      	lsls	r1, r2, #29
 8000a66:	d50d      	bpl.n	8000a84 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000a68:	f06f 0204 	mvn.w	r2, #4
 8000a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000a6e:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000a70:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000a72:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000a74:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000a78:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000a7a:	d068      	beq.n	8000b4e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000a7c:	f7ff ffd5 	bl	8000a2a <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000a80:	2300      	movs	r3, #0
 8000a82:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000a84:	6823      	ldr	r3, [r4, #0]
 8000a86:	691a      	ldr	r2, [r3, #16]
 8000a88:	0712      	lsls	r2, r2, #28
 8000a8a:	d50f      	bpl.n	8000aac <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000a8c:	68da      	ldr	r2, [r3, #12]
 8000a8e:	0710      	lsls	r0, r2, #28
 8000a90:	d50c      	bpl.n	8000aac <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000a92:	f06f 0208 	mvn.w	r2, #8
 8000a96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000a98:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000a9a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000a9c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000a9e:	0799      	lsls	r1, r3, #30
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000aa0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000aa2:	d05a      	beq.n	8000b5a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000aa4:	f7ff ffc1 	bl	8000a2a <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000aac:	6823      	ldr	r3, [r4, #0]
 8000aae:	691a      	ldr	r2, [r3, #16]
 8000ab0:	06d2      	lsls	r2, r2, #27
 8000ab2:	d510      	bpl.n	8000ad6 <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000ab4:	68da      	ldr	r2, [r3, #12]
 8000ab6:	06d0      	lsls	r0, r2, #27
 8000ab8:	d50d      	bpl.n	8000ad6 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000aba:	f06f 0210 	mvn.w	r2, #16
 8000abe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000ac0:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000ac2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000ac4:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000ac6:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000aca:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000acc:	d04b      	beq.n	8000b66 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000ace:	f7ff ffac 	bl	8000a2a <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000ad6:	6823      	ldr	r3, [r4, #0]
 8000ad8:	691a      	ldr	r2, [r3, #16]
 8000ada:	07d1      	lsls	r1, r2, #31
 8000adc:	d508      	bpl.n	8000af0 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000ade:	68da      	ldr	r2, [r3, #12]
 8000ae0:	07d2      	lsls	r2, r2, #31
 8000ae2:	d505      	bpl.n	8000af0 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000ae4:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8000ae8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000aea:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000aec:	f002 f802 	bl	8002af4 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000af0:	6823      	ldr	r3, [r4, #0]
 8000af2:	691a      	ldr	r2, [r3, #16]
 8000af4:	0610      	lsls	r0, r2, #24
 8000af6:	d508      	bpl.n	8000b0a <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000af8:	68da      	ldr	r2, [r3, #12]
 8000afa:	0611      	lsls	r1, r2, #24
 8000afc:	d505      	bpl.n	8000b0a <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000afe:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8000b02:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000b04:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000b06:	f000 f888 	bl	8000c1a <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000b0a:	6823      	ldr	r3, [r4, #0]
 8000b0c:	691a      	ldr	r2, [r3, #16]
 8000b0e:	0652      	lsls	r2, r2, #25
 8000b10:	d508      	bpl.n	8000b24 <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000b12:	68da      	ldr	r2, [r3, #12]
 8000b14:	0650      	lsls	r0, r2, #25
 8000b16:	d505      	bpl.n	8000b24 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000b18:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8000b1c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000b1e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000b20:	f7ff ff85 	bl	8000a2e <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000b24:	6823      	ldr	r3, [r4, #0]
 8000b26:	691a      	ldr	r2, [r3, #16]
 8000b28:	0691      	lsls	r1, r2, #26
 8000b2a:	d522      	bpl.n	8000b72 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000b2c:	68da      	ldr	r2, [r3, #12]
 8000b2e:	0692      	lsls	r2, r2, #26
 8000b30:	d51f      	bpl.n	8000b72 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000b32:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000b36:	4620      	mov	r0, r4
    }
  }
}
 8000b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000b3c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8000b3e:	f000 b86b 	b.w	8000c18 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b42:	f7ff ff71 	bl	8000a28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b46:	4620      	mov	r0, r4
 8000b48:	f7ff ff70 	bl	8000a2c <HAL_TIM_PWM_PulseFinishedCallback>
 8000b4c:	e783      	b.n	8000a56 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b4e:	f7ff ff6b 	bl	8000a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b52:	4620      	mov	r0, r4
 8000b54:	f7ff ff6a 	bl	8000a2c <HAL_TIM_PWM_PulseFinishedCallback>
 8000b58:	e792      	b.n	8000a80 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b5a:	f7ff ff65 	bl	8000a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b5e:	4620      	mov	r0, r4
 8000b60:	f7ff ff64 	bl	8000a2c <HAL_TIM_PWM_PulseFinishedCallback>
 8000b64:	e7a0      	b.n	8000aa8 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000b66:	f7ff ff5f 	bl	8000a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000b6a:	4620      	mov	r0, r4
 8000b6c:	f7ff ff5e 	bl	8000a2c <HAL_TIM_PWM_PulseFinishedCallback>
 8000b70:	e7af      	b.n	8000ad2 <HAL_TIM_IRQHandler+0xa2>
 8000b72:	bd10      	pop	{r4, pc}

08000b74 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000b74:	4a1a      	ldr	r2, [pc, #104]	; (8000be0 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8000b76:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000b78:	4290      	cmp	r0, r2
 8000b7a:	d00a      	beq.n	8000b92 <TIM_Base_SetConfig+0x1e>
 8000b7c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000b80:	d007      	beq.n	8000b92 <TIM_Base_SetConfig+0x1e>
 8000b82:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000b86:	4290      	cmp	r0, r2
 8000b88:	d003      	beq.n	8000b92 <TIM_Base_SetConfig+0x1e>
 8000b8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b8e:	4290      	cmp	r0, r2
 8000b90:	d115      	bne.n	8000bbe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000b92:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000b98:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000b9a:	4a11      	ldr	r2, [pc, #68]	; (8000be0 <TIM_Base_SetConfig+0x6c>)
 8000b9c:	4290      	cmp	r0, r2
 8000b9e:	d00a      	beq.n	8000bb6 <TIM_Base_SetConfig+0x42>
 8000ba0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000ba4:	d007      	beq.n	8000bb6 <TIM_Base_SetConfig+0x42>
 8000ba6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000baa:	4290      	cmp	r0, r2
 8000bac:	d003      	beq.n	8000bb6 <TIM_Base_SetConfig+0x42>
 8000bae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bb2:	4290      	cmp	r0, r2
 8000bb4:	d103      	bne.n	8000bbe <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000bb6:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000bbc:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000bbe:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8000bc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000bc4:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000bc6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000bc8:	688b      	ldr	r3, [r1, #8]
 8000bca:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000bcc:	680b      	ldr	r3, [r1, #0]
 8000bce:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <TIM_Base_SetConfig+0x6c>)
 8000bd2:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000bd4:	bf04      	itt	eq
 8000bd6:	690b      	ldreq	r3, [r1, #16]
 8000bd8:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	6143      	str	r3, [r0, #20]
 8000bde:	4770      	bx	lr
 8000be0:	40012c00 	.word	0x40012c00

08000be4 <HAL_TIM_Base_Init>:
{
 8000be4:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000be6:	4604      	mov	r4, r0
 8000be8:	b1a0      	cbz	r0, 8000c14 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000bea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000bee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000bf2:	b91b      	cbnz	r3, 8000bfc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000bf4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000bf8:	f7ff ff0a 	bl	8000a10 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000bfc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000bfe:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000c00:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000c04:	1d21      	adds	r1, r4, #4
 8000c06:	f7ff ffb5 	bl	8000b74 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000c0a:	2301      	movs	r3, #1
  return HAL_OK;
 8000c0c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000c0e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000c12:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000c14:	2001      	movs	r0, #1
}
 8000c16:	bd10      	pop	{r4, pc}

08000c18 <HAL_TIMEx_CommutationCallback>:
 8000c18:	4770      	bx	lr

08000c1a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000c1a:	4770      	bx	lr

08000c1c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000c1c:	6803      	ldr	r3, [r0, #0]
 8000c1e:	68da      	ldr	r2, [r3, #12]
 8000c20:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000c24:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000c26:	695a      	ldr	r2, [r3, #20]
 8000c28:	f022 0201 	bic.w	r2, r2, #1
 8000c2c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000c2e:	2320      	movs	r3, #32
 8000c30:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8000c34:	4770      	bx	lr
	...

08000c38 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000c3c:	6805      	ldr	r5, [r0, #0]
 8000c3e:	68c2      	ldr	r2, [r0, #12]
 8000c40:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000c42:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000c44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000c4c:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000c4e:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000c50:	430b      	orrs	r3, r1
 8000c52:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000c54:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000c58:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000c5c:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000c62:	696b      	ldr	r3, [r5, #20]
 8000c64:	6982      	ldr	r2, [r0, #24]
 8000c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000c6e:	4b40      	ldr	r3, [pc, #256]	; (8000d70 <UART_SetConfig+0x138>)
{
 8000c70:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000c72:	429d      	cmp	r5, r3
 8000c74:	f04f 0419 	mov.w	r4, #25
 8000c78:	d146      	bne.n	8000d08 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000c7a:	f7ff fe9b 	bl	80009b4 <HAL_RCC_GetPCLK2Freq>
 8000c7e:	fb04 f300 	mul.w	r3, r4, r0
 8000c82:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000c86:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000c8a:	00b6      	lsls	r6, r6, #2
 8000c8c:	fbb3 f3f6 	udiv	r3, r3, r6
 8000c90:	fbb3 f3f8 	udiv	r3, r3, r8
 8000c94:	011e      	lsls	r6, r3, #4
 8000c96:	f7ff fe8d 	bl	80009b4 <HAL_RCC_GetPCLK2Freq>
 8000c9a:	4360      	muls	r0, r4
 8000c9c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	fbb0 f7f3 	udiv	r7, r0, r3
 8000ca6:	f7ff fe85 	bl	80009b4 <HAL_RCC_GetPCLK2Freq>
 8000caa:	4360      	muls	r0, r4
 8000cac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cb6:	fbb3 f3f8 	udiv	r3, r3, r8
 8000cba:	fb08 7313 	mls	r3, r8, r3, r7
 8000cbe:	011b      	lsls	r3, r3, #4
 8000cc0:	3332      	adds	r3, #50	; 0x32
 8000cc2:	fbb3 f3f8 	udiv	r3, r3, r8
 8000cc6:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000cca:	f7ff fe73 	bl	80009b4 <HAL_RCC_GetPCLK2Freq>
 8000cce:	4360      	muls	r0, r4
 8000cd0:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000cd4:	0092      	lsls	r2, r2, #2
 8000cd6:	fbb0 faf2 	udiv	sl, r0, r2
 8000cda:	f7ff fe6b 	bl	80009b4 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000cde:	4360      	muls	r0, r4
 8000ce0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cea:	fbb3 f3f8 	udiv	r3, r3, r8
 8000cee:	fb08 a313 	mls	r3, r8, r3, sl
 8000cf2:	011b      	lsls	r3, r3, #4
 8000cf4:	3332      	adds	r3, #50	; 0x32
 8000cf6:	fbb3 f3f8 	udiv	r3, r3, r8
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	433b      	orrs	r3, r7
 8000d00:	4433      	add	r3, r6
 8000d02:	60ab      	str	r3, [r5, #8]
 8000d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d08:	f7ff fe44 	bl	8000994 <HAL_RCC_GetPCLK1Freq>
 8000d0c:	fb04 f300 	mul.w	r3, r4, r0
 8000d10:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000d14:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000d18:	00b6      	lsls	r6, r6, #2
 8000d1a:	fbb3 f3f6 	udiv	r3, r3, r6
 8000d1e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000d22:	011e      	lsls	r6, r3, #4
 8000d24:	f7ff fe36 	bl	8000994 <HAL_RCC_GetPCLK1Freq>
 8000d28:	4360      	muls	r0, r4
 8000d2a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	fbb0 f7f3 	udiv	r7, r0, r3
 8000d34:	f7ff fe2e 	bl	8000994 <HAL_RCC_GetPCLK1Freq>
 8000d38:	4360      	muls	r0, r4
 8000d3a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d44:	fbb3 f3f8 	udiv	r3, r3, r8
 8000d48:	fb08 7313 	mls	r3, r8, r3, r7
 8000d4c:	011b      	lsls	r3, r3, #4
 8000d4e:	3332      	adds	r3, #50	; 0x32
 8000d50:	fbb3 f3f8 	udiv	r3, r3, r8
 8000d54:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000d58:	f7ff fe1c 	bl	8000994 <HAL_RCC_GetPCLK1Freq>
 8000d5c:	4360      	muls	r0, r4
 8000d5e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000d62:	0092      	lsls	r2, r2, #2
 8000d64:	fbb0 faf2 	udiv	sl, r0, r2
 8000d68:	f7ff fe14 	bl	8000994 <HAL_RCC_GetPCLK1Freq>
 8000d6c:	e7b7      	b.n	8000cde <UART_SetConfig+0xa6>
 8000d6e:	bf00      	nop
 8000d70:	40013800 	.word	0x40013800

08000d74 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d76:	4604      	mov	r4, r0
 8000d78:	460e      	mov	r6, r1
 8000d7a:	4617      	mov	r7, r2
 8000d7c:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000d7e:	6821      	ldr	r1, [r4, #0]
 8000d80:	680b      	ldr	r3, [r1, #0]
 8000d82:	ea36 0303 	bics.w	r3, r6, r3
 8000d86:	d101      	bne.n	8000d8c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000d88:	2000      	movs	r0, #0
}
 8000d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000d8c:	1c6b      	adds	r3, r5, #1
 8000d8e:	d0f7      	beq.n	8000d80 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000d90:	b995      	cbnz	r5, 8000db8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000d92:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000d94:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000d96:	68da      	ldr	r2, [r3, #12]
 8000d98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000d9c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000d9e:	695a      	ldr	r2, [r3, #20]
 8000da0:	f022 0201 	bic.w	r2, r2, #1
 8000da4:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000da6:	2320      	movs	r3, #32
 8000da8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000dac:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000db0:	2300      	movs	r3, #0
 8000db2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000db8:	f7ff f9e8 	bl	800018c <HAL_GetTick>
 8000dbc:	1bc0      	subs	r0, r0, r7
 8000dbe:	4285      	cmp	r5, r0
 8000dc0:	d2dd      	bcs.n	8000d7e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000dc2:	e7e6      	b.n	8000d92 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000dc4 <HAL_UART_Init>:
{
 8000dc4:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000dc6:	4604      	mov	r4, r0
 8000dc8:	b340      	cbz	r0, 8000e1c <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000dca:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000dce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000dd2:	b91b      	cbnz	r3, 8000ddc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000dd4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000dd8:	f001 febc 	bl	8002b54 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000ddc:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000dde:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000de0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000de4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000de6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000de8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000dec:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000dee:	f7ff ff23 	bl	8000c38 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000df2:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000df4:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000df6:	691a      	ldr	r2, [r3, #16]
 8000df8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000dfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000dfe:	695a      	ldr	r2, [r3, #20]
 8000e00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000e04:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000e06:	68da      	ldr	r2, [r3, #12]
 8000e08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e0c:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8000e0e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e10:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000e12:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000e16:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000e1a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000e1c:	2001      	movs	r0, #1
}
 8000e1e:	bd10      	pop	{r4, pc}

08000e20 <HAL_UART_Transmit>:
{
 8000e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e24:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8000e26:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8000e2a:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8000e2c:	2b20      	cmp	r3, #32
{
 8000e2e:	460d      	mov	r5, r1
 8000e30:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8000e32:	d14e      	bne.n	8000ed2 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d049      	beq.n	8000ecc <HAL_UART_Transmit+0xac>
 8000e38:	2a00      	cmp	r2, #0
 8000e3a:	d047      	beq.n	8000ecc <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8000e3c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d046      	beq.n	8000ed2 <HAL_UART_Transmit+0xb2>
 8000e44:	2301      	movs	r3, #1
 8000e46:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000e4e:	2321      	movs	r3, #33	; 0x21
 8000e50:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8000e54:	f7ff f99a 	bl	800018c <HAL_GetTick>
 8000e58:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8000e5a:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8000e5e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8000e62:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	b96b      	cbnz	r3, 8000e84 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000e68:	463b      	mov	r3, r7
 8000e6a:	4632      	mov	r2, r6
 8000e6c:	2140      	movs	r1, #64	; 0x40
 8000e6e:	4620      	mov	r0, r4
 8000e70:	f7ff ff80 	bl	8000d74 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000e74:	b9a8      	cbnz	r0, 8000ea2 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8000e76:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8000e78:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8000e7c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8000e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8000e84:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000e86:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000e8e:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000e90:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000e96:	4620      	mov	r0, r4
 8000e98:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000e9a:	d10e      	bne.n	8000eba <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000e9c:	f7ff ff6a 	bl	8000d74 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000ea0:	b110      	cbz	r0, 8000ea8 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8000ea2:	2003      	movs	r0, #3
 8000ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000ea8:	882b      	ldrh	r3, [r5, #0]
 8000eaa:	6822      	ldr	r2, [r4, #0]
 8000eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000eb0:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000eb2:	6923      	ldr	r3, [r4, #16]
 8000eb4:	b943      	cbnz	r3, 8000ec8 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8000eb6:	3502      	adds	r5, #2
 8000eb8:	e7d3      	b.n	8000e62 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000eba:	f7ff ff5b 	bl	8000d74 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000ebe:	2800      	cmp	r0, #0
 8000ec0:	d1ef      	bne.n	8000ea2 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000ec2:	6823      	ldr	r3, [r4, #0]
 8000ec4:	782a      	ldrb	r2, [r5, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	3501      	adds	r5, #1
 8000eca:	e7ca      	b.n	8000e62 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8000ecc:	2001      	movs	r0, #1
 8000ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8000ed2:	2002      	movs	r0, #2
}
 8000ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000ed8 <HAL_UART_Transmit_IT>:
  if(huart->gState == HAL_UART_STATE_READY)
 8000ed8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000edc:	2b20      	cmp	r3, #32
 8000ede:	d118      	bne.n	8000f12 <HAL_UART_Transmit_IT+0x3a>
    if((pData == NULL) || (Size == 0U)) 
 8000ee0:	b1a9      	cbz	r1, 8000f0e <HAL_UART_Transmit_IT+0x36>
 8000ee2:	b1a2      	cbz	r2, 8000f0e <HAL_UART_Transmit_IT+0x36>
    __HAL_LOCK(huart);
 8000ee4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d012      	beq.n	8000f12 <HAL_UART_Transmit_IT+0x3a>
    huart->TxXferCount = Size;
 8000eec:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->TxXferSize = Size;
 8000eee:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ef0:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000ef2:	2221      	movs	r2, #33	; 0x21
    huart->pTxBuffPtr = pData;
 8000ef4:	6201      	str	r1, [r0, #32]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8000ef6:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ef8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000efa:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8000efe:	68ca      	ldr	r2, [r1, #12]
    __HAL_UNLOCK(huart);
 8000f00:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8000f04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f08:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	4770      	bx	lr
      return HAL_ERROR;
 8000f0e:	2001      	movs	r0, #1
 8000f10:	4770      	bx	lr
    return HAL_BUSY;
 8000f12:	2002      	movs	r0, #2
}
 8000f14:	4770      	bx	lr

08000f16 <HAL_UART_TxCpltCallback>:
 8000f16:	4770      	bx	lr

08000f18 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8000f18:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8000f1c:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8000f1e:	2b22      	cmp	r3, #34	; 0x22
 8000f20:	d136      	bne.n	8000f90 <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000f22:	6883      	ldr	r3, [r0, #8]
 8000f24:	6901      	ldr	r1, [r0, #16]
 8000f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f2a:	6802      	ldr	r2, [r0, #0]
 8000f2c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000f2e:	d123      	bne.n	8000f78 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000f30:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8000f32:	b9e9      	cbnz	r1, 8000f70 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000f34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f38:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8000f3c:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8000f3e:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8000f40:	3c01      	subs	r4, #1
 8000f42:	b2a4      	uxth	r4, r4
 8000f44:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8000f46:	b98c      	cbnz	r4, 8000f6c <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8000f48:	6803      	ldr	r3, [r0, #0]
 8000f4a:	68da      	ldr	r2, [r3, #12]
 8000f4c:	f022 0220 	bic.w	r2, r2, #32
 8000f50:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8000f52:	68da      	ldr	r2, [r3, #12]
 8000f54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f58:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8000f5a:	695a      	ldr	r2, [r3, #20]
 8000f5c:	f022 0201 	bic.w	r2, r2, #1
 8000f60:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8000f62:	2320      	movs	r3, #32
 8000f64:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8000f68:	f001 fdba 	bl	8002ae0 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8000f6c:	2000      	movs	r0, #0
}
 8000f6e:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	f823 2b01 	strh.w	r2, [r3], #1
 8000f76:	e7e1      	b.n	8000f3c <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8000f78:	b921      	cbnz	r1, 8000f84 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8000f7a:	1c59      	adds	r1, r3, #1
 8000f7c:	6852      	ldr	r2, [r2, #4]
 8000f7e:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8000f80:	701a      	strb	r2, [r3, #0]
 8000f82:	e7dc      	b.n	8000f3e <UART_Receive_IT+0x26>
 8000f84:	6852      	ldr	r2, [r2, #4]
 8000f86:	1c59      	adds	r1, r3, #1
 8000f88:	6281      	str	r1, [r0, #40]	; 0x28
 8000f8a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000f8e:	e7f7      	b.n	8000f80 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8000f90:	2002      	movs	r0, #2
 8000f92:	bd10      	pop	{r4, pc}

08000f94 <HAL_UART_ErrorCallback>:
 8000f94:	4770      	bx	lr
	...

08000f98 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000f98:	6803      	ldr	r3, [r0, #0]
{
 8000f9a:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000f9c:	681a      	ldr	r2, [r3, #0]
{
 8000f9e:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8000fa0:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000fa2:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8000fa4:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8000fa6:	d107      	bne.n	8000fb8 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000fa8:	0696      	lsls	r6, r2, #26
 8000faa:	d55a      	bpl.n	8001062 <HAL_UART_IRQHandler+0xca>
 8000fac:	068d      	lsls	r5, r1, #26
 8000fae:	d558      	bpl.n	8001062 <HAL_UART_IRQHandler+0xca>
}
 8000fb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8000fb4:	f7ff bfb0 	b.w	8000f18 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8000fb8:	f015 0501 	ands.w	r5, r5, #1
 8000fbc:	d102      	bne.n	8000fc4 <HAL_UART_IRQHandler+0x2c>
 8000fbe:	f411 7f90 	tst.w	r1, #288	; 0x120
 8000fc2:	d04e      	beq.n	8001062 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8000fc4:	07d3      	lsls	r3, r2, #31
 8000fc6:	d505      	bpl.n	8000fd4 <HAL_UART_IRQHandler+0x3c>
 8000fc8:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8000fca:	bf42      	ittt	mi
 8000fcc:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8000fce:	f043 0301 	orrmi.w	r3, r3, #1
 8000fd2:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000fd4:	0750      	lsls	r0, r2, #29
 8000fd6:	d504      	bpl.n	8000fe2 <HAL_UART_IRQHandler+0x4a>
 8000fd8:	b11d      	cbz	r5, 8000fe2 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8000fda:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000fdc:	f043 0302 	orr.w	r3, r3, #2
 8000fe0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000fe2:	0793      	lsls	r3, r2, #30
 8000fe4:	d504      	bpl.n	8000ff0 <HAL_UART_IRQHandler+0x58>
 8000fe6:	b11d      	cbz	r5, 8000ff0 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8000fe8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000fea:	f043 0304 	orr.w	r3, r3, #4
 8000fee:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000ff0:	0716      	lsls	r6, r2, #28
 8000ff2:	d504      	bpl.n	8000ffe <HAL_UART_IRQHandler+0x66>
 8000ff4:	b11d      	cbz	r5, 8000ffe <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8000ff6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000ff8:	f043 0308 	orr.w	r3, r3, #8
 8000ffc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8000ffe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001000:	2b00      	cmp	r3, #0
 8001002:	d066      	beq.n	80010d2 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001004:	0695      	lsls	r5, r2, #26
 8001006:	d504      	bpl.n	8001012 <HAL_UART_IRQHandler+0x7a>
 8001008:	0688      	lsls	r0, r1, #26
 800100a:	d502      	bpl.n	8001012 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 800100c:	4620      	mov	r0, r4
 800100e:	f7ff ff83 	bl	8000f18 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001012:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8001014:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001016:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001018:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800101a:	0711      	lsls	r1, r2, #28
 800101c:	d402      	bmi.n	8001024 <HAL_UART_IRQHandler+0x8c>
 800101e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001022:	d01a      	beq.n	800105a <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001024:	f7ff fdfa 	bl	8000c1c <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001028:	6823      	ldr	r3, [r4, #0]
 800102a:	695a      	ldr	r2, [r3, #20]
 800102c:	0652      	lsls	r2, r2, #25
 800102e:	d510      	bpl.n	8001052 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001030:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001032:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001038:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800103a:	b150      	cbz	r0, 8001052 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800103c:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <HAL_UART_IRQHandler+0x13c>)
 800103e:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001040:	f7ff f8fc 	bl	800023c <HAL_DMA_Abort_IT>
 8001044:	2800      	cmp	r0, #0
 8001046:	d044      	beq.n	80010d2 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001048:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800104a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800104e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001050:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001052:	4620      	mov	r0, r4
 8001054:	f7ff ff9e 	bl	8000f94 <HAL_UART_ErrorCallback>
 8001058:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800105a:	f7ff ff9b 	bl	8000f94 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800105e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001060:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001062:	0616      	lsls	r6, r2, #24
 8001064:	d527      	bpl.n	80010b6 <HAL_UART_IRQHandler+0x11e>
 8001066:	060d      	lsls	r5, r1, #24
 8001068:	d525      	bpl.n	80010b6 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800106a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800106e:	2a21      	cmp	r2, #33	; 0x21
 8001070:	d12f      	bne.n	80010d2 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001072:	68a2      	ldr	r2, [r4, #8]
 8001074:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001078:	6a22      	ldr	r2, [r4, #32]
 800107a:	d117      	bne.n	80010ac <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800107c:	8811      	ldrh	r1, [r2, #0]
 800107e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001082:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001084:	6921      	ldr	r1, [r4, #16]
 8001086:	b979      	cbnz	r1, 80010a8 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001088:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800108a:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 800108c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800108e:	3a01      	subs	r2, #1
 8001090:	b292      	uxth	r2, r2
 8001092:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001094:	b9ea      	cbnz	r2, 80010d2 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001096:	68da      	ldr	r2, [r3, #12]
 8001098:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800109c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80010a8:	3201      	adds	r2, #1
 80010aa:	e7ee      	b.n	800108a <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80010ac:	1c51      	adds	r1, r2, #1
 80010ae:	6221      	str	r1, [r4, #32]
 80010b0:	7812      	ldrb	r2, [r2, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	e7ea      	b.n	800108c <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80010b6:	0650      	lsls	r0, r2, #25
 80010b8:	d50b      	bpl.n	80010d2 <HAL_UART_IRQHandler+0x13a>
 80010ba:	064a      	lsls	r2, r1, #25
 80010bc:	d509      	bpl.n	80010d2 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80010be:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80010c0:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80010c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010c6:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80010c8:	2320      	movs	r3, #32
 80010ca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80010ce:	f7ff ff22 	bl	8000f16 <HAL_UART_TxCpltCallback>
 80010d2:	bd70      	pop	{r4, r5, r6, pc}
 80010d4:	080010d9 	.word	0x080010d9

080010d8 <UART_DMAAbortOnError>:
{
 80010d8:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80010da:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80010dc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80010de:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80010e0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80010e2:	f7ff ff57 	bl	8000f94 <HAL_UART_ErrorCallback>
 80010e6:	bd08      	pop	{r3, pc}

080010e8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80010e8:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80010ea:	f000 feed 	bl	8001ec8 <vTaskStartScheduler>
  
  return osOK;
}
 80010ee:	2000      	movs	r0, #0
 80010f0:	bd08      	pop	{r3, pc}

080010f2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80010f2:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80010f4:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 80010f8:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 80010fa:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80010fc:	bf08      	it	eq
 80010fe:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001100:	8a02      	ldrh	r2, [r0, #16]
    fpriority += (priority - osPriorityIdle);
 8001102:	bf18      	it	ne
 8001104:	3403      	addne	r4, #3
{
 8001106:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001108:	e890 0022 	ldmia.w	r0, {r1, r5}
 800110c:	a803      	add	r0, sp, #12
 800110e:	9001      	str	r0, [sp, #4]
 8001110:	9400      	str	r4, [sp, #0]
 8001112:	4628      	mov	r0, r5
 8001114:	f000 fe08 	bl	8001d28 <xTaskCreate>
 8001118:	2801      	cmp	r0, #1
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
                   &handle) != pdPASS)  {
    return NULL;
 800111a:	bf14      	ite	ne
 800111c:	2000      	movne	r0, #0
  }     
#endif
  
  return handle;
 800111e:	9803      	ldreq	r0, [sp, #12]
}
 8001120:	b005      	add	sp, #20
 8001122:	bd30      	pop	{r4, r5, pc}

08001124 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8001124:	b507      	push	{r0, r1, r2, lr}
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
                      (StaticTimer_t *)timer_def->controlblock);  
#else
  return xTimerCreate((const char *)"",
 8001126:	6803      	ldr	r3, [r0, #0]
 8001128:	3901      	subs	r1, #1
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	4613      	mov	r3, r2
 800112e:	424a      	negs	r2, r1
 8001130:	414a      	adcs	r2, r1
 8001132:	4803      	ldr	r0, [pc, #12]	; (8001140 <osTimerCreate+0x1c>)
 8001134:	2101      	movs	r1, #1
 8001136:	f001 fa83 	bl	8002640 <xTimerCreate>
#endif

#else 
	return NULL;
#endif
}
 800113a:	b003      	add	sp, #12
 800113c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001140:	08002de9 	.word	0x08002de9

08001144 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8001144:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8001146:	2400      	movs	r4, #0
 8001148:	9403      	str	r4, [sp, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;

  if (ticks == 0)
    ticks = 1;
 800114a:	42a1      	cmp	r1, r4
 800114c:	bf14      	ite	ne
 800114e:	460a      	movne	r2, r1
 8001150:	2201      	moveq	r2, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001152:	f3ef 8305 	mrs	r3, IPSR
    
  if (inHandlerMode()) 
 8001156:	b1a3      	cbz	r3, 8001182 <osTimerStart+0x3e>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8001158:	9400      	str	r4, [sp, #0]
 800115a:	ab03      	add	r3, sp, #12
 800115c:	2109      	movs	r1, #9
 800115e:	f001 fa93 	bl	8002688 <xTimerGenericCommand>
 8001162:	2801      	cmp	r0, #1
 8001164:	d113      	bne.n	800118e <osTimerStart+0x4a>
    {
      result = osErrorOS;
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8001166:	9b03      	ldr	r3, [sp, #12]
 8001168:	b913      	cbnz	r3, 8001170 <osTimerStart+0x2c>
  osStatus result = osOK;
 800116a:	2000      	movs	r0, #0

#else 
  result = osErrorOS;
#endif
  return result;
}
 800116c:	b004      	add	sp, #16
 800116e:	bd10      	pop	{r4, pc}
      portEND_SWITCHING_ISR(taskWoken);     
 8001170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <osTimerStart+0x50>)
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	f3bf 8f4f 	dsb	sy
 800117c:	f3bf 8f6f 	isb	sy
 8001180:	e7f3      	b.n	800116a <osTimerStart+0x26>
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2104      	movs	r1, #4
 8001186:	f001 fa7f 	bl	8002688 <xTimerGenericCommand>
 800118a:	2801      	cmp	r0, #1
 800118c:	d0ed      	beq.n	800116a <osTimerStart+0x26>
      result = osErrorOS;
 800118e:	20ff      	movs	r0, #255	; 0xff
  return result;
 8001190:	e7ec      	b.n	800116c <osTimerStart+0x28>
 8001192:	bf00      	nop
 8001194:	e000ed04 	.word	0xe000ed04

08001198 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001198:	f100 0308 	add.w	r3, r0, #8
 800119c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800119e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80011a2:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80011a4:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80011a6:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80011a8:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80011aa:	6003      	str	r3, [r0, #0]
 80011ac:	4770      	bx	lr

080011ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	6103      	str	r3, [r0, #16]
 80011b2:	4770      	bx	lr

080011b4 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80011b4:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80011b6:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80011b8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80011ba:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80011bc:	689a      	ldr	r2, [r3, #8]
 80011be:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80011c0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80011c2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80011c4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80011c6:	3301      	adds	r3, #1
 80011c8:	6003      	str	r3, [r0, #0]
 80011ca:	4770      	bx	lr

080011cc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80011cc:	680a      	ldr	r2, [r1, #0]
{
 80011ce:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80011d0:	1c53      	adds	r3, r2, #1
 80011d2:	d10a      	bne.n	80011ea <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80011d4:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80011da:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80011dc:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80011de:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80011e0:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80011e2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80011e4:	3301      	adds	r3, #1
 80011e6:	6003      	str	r3, [r0, #0]
 80011e8:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80011ea:	f100 0308 	add.w	r3, r0, #8
 80011ee:	685c      	ldr	r4, [r3, #4]
 80011f0:	6825      	ldr	r5, [r4, #0]
 80011f2:	42aa      	cmp	r2, r5
 80011f4:	d3ef      	bcc.n	80011d6 <vListInsert+0xa>
 80011f6:	4623      	mov	r3, r4
 80011f8:	e7f9      	b.n	80011ee <vListInsert+0x22>

080011fa <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80011fa:	6841      	ldr	r1, [r0, #4]
 80011fc:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80011fe:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001200:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001202:	6882      	ldr	r2, [r0, #8]
 8001204:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001206:	6859      	ldr	r1, [r3, #4]
 8001208:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800120a:	bf08      	it	eq
 800120c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800120e:	2200      	movs	r2, #0
 8001210:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001212:	6818      	ldr	r0, [r3, #0]
 8001214:	3801      	subs	r0, #1
 8001216:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001218:	4770      	bx	lr
	...

0800121c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <prvTaskExitError+0x2c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	3301      	adds	r3, #1
 8001222:	d008      	beq.n	8001236 <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001228:	f383 8811 	msr	BASEPRI, r3
 800122c:	f3bf 8f6f 	isb	sy
 8001230:	f3bf 8f4f 	dsb	sy
 8001234:	e7fe      	b.n	8001234 <prvTaskExitError+0x18>
 8001236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800123a:	f383 8811 	msr	BASEPRI, r3
 800123e:	f3bf 8f6f 	isb	sy
 8001242:	f3bf 8f4f 	dsb	sy
 8001246:	e7fe      	b.n	8001246 <prvTaskExitError+0x2a>
 8001248:	20000004 	.word	0x20000004

0800124c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800124c:	4806      	ldr	r0, [pc, #24]	; (8001268 <prvPortStartFirstTask+0x1c>)
 800124e:	6800      	ldr	r0, [r0, #0]
 8001250:	6800      	ldr	r0, [r0, #0]
 8001252:	f380 8808 	msr	MSP, r0
 8001256:	b662      	cpsie	i
 8001258:	b661      	cpsie	f
 800125a:	f3bf 8f4f 	dsb	sy
 800125e:	f3bf 8f6f 	isb	sy
 8001262:	df00      	svc	0
 8001264:	bf00      	nop
 8001266:	0000      	.short	0x0000
 8001268:	e000ed08 	.word	0xe000ed08

0800126c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800126c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001270:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001276:	f021 0101 	bic.w	r1, r1, #1
 800127a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800127e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001282:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8001286:	3840      	subs	r0, #64	; 0x40
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	0800121d 	.word	0x0800121d

08001290 <SVC_Handler>:
	__asm volatile (
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <pxCurrentTCBConst2>)
 8001292:	6819      	ldr	r1, [r3, #0]
 8001294:	6808      	ldr	r0, [r1, #0]
 8001296:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800129a:	f380 8809 	msr	PSP, r0
 800129e:	f3bf 8f6f 	isb	sy
 80012a2:	f04f 0000 	mov.w	r0, #0
 80012a6:	f380 8811 	msr	BASEPRI, r0
 80012aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80012ae:	4770      	bx	lr

080012b0 <pxCurrentTCBConst2>:
 80012b0:	20002000 	.word	0x20002000

080012b4 <vPortEnterCritical>:
 80012b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012b8:	f383 8811 	msr	BASEPRI, r3
 80012bc:	f3bf 8f6f 	isb	sy
 80012c0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80012c4:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <vPortEnterCritical+0x3c>)
 80012c6:	6813      	ldr	r3, [r2, #0]
 80012c8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80012ca:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80012cc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80012ce:	d10d      	bne.n	80012ec <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <vPortEnterCritical+0x40>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80012d8:	d008      	beq.n	80012ec <vPortEnterCritical+0x38>
 80012da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012de:	f383 8811 	msr	BASEPRI, r3
 80012e2:	f3bf 8f6f 	isb	sy
 80012e6:	f3bf 8f4f 	dsb	sy
 80012ea:	e7fe      	b.n	80012ea <vPortEnterCritical+0x36>
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20000004 	.word	0x20000004
 80012f4:	e000ed04 	.word	0xe000ed04

080012f8 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80012f8:	4a08      	ldr	r2, [pc, #32]	; (800131c <vPortExitCritical+0x24>)
 80012fa:	6813      	ldr	r3, [r2, #0]
 80012fc:	b943      	cbnz	r3, 8001310 <vPortExitCritical+0x18>
 80012fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001302:	f383 8811 	msr	BASEPRI, r3
 8001306:	f3bf 8f6f 	isb	sy
 800130a:	f3bf 8f4f 	dsb	sy
 800130e:	e7fe      	b.n	800130e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001310:	3b01      	subs	r3, #1
 8001312:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001314:	b90b      	cbnz	r3, 800131a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001316:	f383 8811 	msr	BASEPRI, r3
 800131a:	4770      	bx	lr
 800131c:	20000004 	.word	0x20000004

08001320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001320:	f3ef 8009 	mrs	r0, PSP
 8001324:	f3bf 8f6f 	isb	sy
 8001328:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <pxCurrentTCBConst>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001330:	6010      	str	r0, [r2, #0]
 8001332:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001336:	f04f 0050 	mov.w	r0, #80	; 0x50
 800133a:	f380 8811 	msr	BASEPRI, r0
 800133e:	f000 ff55 	bl	80021ec <vTaskSwitchContext>
 8001342:	f04f 0000 	mov.w	r0, #0
 8001346:	f380 8811 	msr	BASEPRI, r0
 800134a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800134e:	6819      	ldr	r1, [r3, #0]
 8001350:	6808      	ldr	r0, [r1, #0]
 8001352:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001356:	f380 8809 	msr	PSP, r0
 800135a:	f3bf 8f6f 	isb	sy
 800135e:	4770      	bx	lr

08001360 <pxCurrentTCBConst>:
 8001360:	20002000 	.word	0x20002000

08001364 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001364:	b508      	push	{r3, lr}
	__asm volatile
 8001366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800136a:	f383 8811 	msr	BASEPRI, r3
 800136e:	f3bf 8f6f 	isb	sy
 8001372:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001376:	f000 fdf5 	bl	8001f64 <xTaskIncrementTick>
 800137a:	b118      	cbz	r0, 8001384 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800137c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001380:	4b02      	ldr	r3, [pc, #8]	; (800138c <SysTick_Handler+0x28>)
 8001382:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001384:	2300      	movs	r3, #0
 8001386:	f383 8811 	msr	BASEPRI, r3
 800138a:	bd08      	pop	{r3, pc}
 800138c:	e000ed04 	.word	0xe000ed04

08001390 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001390:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <vPortSetupTimerInterrupt+0x1c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	fbb3 f3f2 	udiv	r3, r3, r2
 800139c:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <vPortSetupTimerInterrupt+0x20>)
 800139e:	3b01      	subs	r3, #1
 80013a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80013a2:	2207      	movs	r2, #7
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <vPortSetupTimerInterrupt+0x24>)
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000020 	.word	0x20000020
 80013b0:	e000e014 	.word	0xe000e014
 80013b4:	e000e010 	.word	0xe000e010

080013b8 <xPortStartScheduler>:
{
 80013b8:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80013ba:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <xPortStartScheduler+0x80>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80013bc:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80013be:	781a      	ldrb	r2, [r3, #0]
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80013c4:	22ff      	movs	r2, #255	; 0xff
 80013c6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80013c8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80013ca:	4a1c      	ldr	r2, [pc, #112]	; (800143c <xPortStartScheduler+0x84>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80013d2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80013d6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80013da:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80013dc:	2207      	movs	r2, #7
 80013de:	4b18      	ldr	r3, [pc, #96]	; (8001440 <xPortStartScheduler+0x88>)
 80013e0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80013e2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80013e6:	1e54      	subs	r4, r2, #1
 80013e8:	0600      	lsls	r0, r0, #24
 80013ea:	d41c      	bmi.n	8001426 <xPortStartScheduler+0x6e>
 80013ec:	b101      	cbz	r1, 80013f0 <xPortStartScheduler+0x38>
 80013ee:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80013f4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80013f8:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80013fa:	9b01      	ldr	r3, [sp, #4]
 80013fc:	4a0e      	ldr	r2, [pc, #56]	; (8001438 <xPortStartScheduler+0x80>)
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <xPortStartScheduler+0x8c>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800140a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001412:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8001414:	f7ff ffbc 	bl	8001390 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001418:	2200      	movs	r2, #0
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <xPortStartScheduler+0x90>)
 800141c:	601a      	str	r2, [r3, #0]
	prvPortStartFirstTask();
 800141e:	f7ff ff15 	bl	800124c <prvPortStartFirstTask>
	prvTaskExitError();
 8001422:	f7ff fefb 	bl	800121c <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001426:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800142a:	2101      	movs	r1, #1
 800142c:	0052      	lsls	r2, r2, #1
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	f88d 2003 	strb.w	r2, [sp, #3]
 8001434:	4622      	mov	r2, r4
 8001436:	e7d4      	b.n	80013e2 <xPortStartScheduler+0x2a>
 8001438:	e000e400 	.word	0xe000e400
 800143c:	20000040 	.word	0x20000040
 8001440:	20000044 	.word	0x20000044
 8001444:	e000ed20 	.word	0xe000ed20
 8001448:	20000004 	.word	0x20000004

0800144c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 800144c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001450:	2b0f      	cmp	r3, #15
 8001452:	d90e      	bls.n	8001472 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001454:	4a10      	ldr	r2, [pc, #64]	; (8001498 <vPortValidateInterruptPriority+0x4c>)
 8001456:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001458:	4a10      	ldr	r2, [pc, #64]	; (800149c <vPortValidateInterruptPriority+0x50>)
 800145a:	7812      	ldrb	r2, [r2, #0]
 800145c:	429a      	cmp	r2, r3
 800145e:	d908      	bls.n	8001472 <vPortValidateInterruptPriority+0x26>
	__asm volatile
 8001460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001464:	f383 8811 	msr	BASEPRI, r3
 8001468:	f3bf 8f6f 	isb	sy
 800146c:	f3bf 8f4f 	dsb	sy
 8001470:	e7fe      	b.n	8001470 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <vPortValidateInterruptPriority+0x54>)
 8001474:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <vPortValidateInterruptPriority+0x58>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6812      	ldr	r2, [r2, #0]
 800147a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800147e:	4293      	cmp	r3, r2
 8001480:	d908      	bls.n	8001494 <vPortValidateInterruptPriority+0x48>
 8001482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001486:	f383 8811 	msr	BASEPRI, r3
 800148a:	f3bf 8f6f 	isb	sy
 800148e:	f3bf 8f4f 	dsb	sy
 8001492:	e7fe      	b.n	8001492 <vPortValidateInterruptPriority+0x46>
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000e3f0 	.word	0xe000e3f0
 800149c:	20000040 	.word	0x20000040
 80014a0:	e000ed0c 	.word	0xe000ed0c
 80014a4:	20000044 	.word	0x20000044

080014a8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80014a8:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80014aa:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <prvInsertBlockIntoFreeList+0x40>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	4282      	cmp	r2, r0
 80014b0:	d318      	bcc.n	80014e4 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80014b2:	685c      	ldr	r4, [r3, #4]
 80014b4:	1919      	adds	r1, r3, r4
 80014b6:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80014b8:	bf01      	itttt	eq
 80014ba:	6841      	ldreq	r1, [r0, #4]
 80014bc:	4618      	moveq	r0, r3
 80014be:	1909      	addeq	r1, r1, r4
 80014c0:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80014c2:	6844      	ldr	r4, [r0, #4]
 80014c4:	1901      	adds	r1, r0, r4
 80014c6:	428a      	cmp	r2, r1
 80014c8:	d107      	bne.n	80014da <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80014ca:	4908      	ldr	r1, [pc, #32]	; (80014ec <prvInsertBlockIntoFreeList+0x44>)
 80014cc:	6809      	ldr	r1, [r1, #0]
 80014ce:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80014d0:	bf1f      	itttt	ne
 80014d2:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80014d4:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80014d6:	1909      	addne	r1, r1, r4
 80014d8:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80014da:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80014dc:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80014de:	bf18      	it	ne
 80014e0:	6018      	strne	r0, [r3, #0]
 80014e2:	bd10      	pop	{r4, pc}
 80014e4:	4613      	mov	r3, r2
 80014e6:	e7e1      	b.n	80014ac <prvInsertBlockIntoFreeList+0x4>
 80014e8:	20001ff8 	.word	0x20001ff8
 80014ec:	20000048 	.word	0x20000048

080014f0 <pvPortMalloc>:
{
 80014f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014f4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80014f6:	f000 fd27 	bl	8001f48 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80014fa:	493e      	ldr	r1, [pc, #248]	; (80015f4 <pvPortMalloc+0x104>)
 80014fc:	4d3e      	ldr	r5, [pc, #248]	; (80015f8 <pvPortMalloc+0x108>)
 80014fe:	680b      	ldr	r3, [r1, #0]
 8001500:	bb0b      	cbnz	r3, 8001546 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8001502:	4a3e      	ldr	r2, [pc, #248]	; (80015fc <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001504:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001506:	bf1d      	ittte	ne
 8001508:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800150a:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800150e:	f502 53fd 	addne.w	r3, r2, #8096	; 0x1fa0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001512:	f44f 53fd 	moveq.w	r3, #8096	; 0x1fa0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001516:	bf1c      	itt	ne
 8001518:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800151a:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 800151c:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800151e:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001520:	4e37      	ldr	r6, [pc, #220]	; (8001600 <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 8001522:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001524:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8001528:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800152a:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 800152c:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800152e:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 8001530:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001532:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001534:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001536:	4b33      	ldr	r3, [pc, #204]	; (8001604 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001538:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800153a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800153c:	4b32      	ldr	r3, [pc, #200]	; (8001608 <pvPortMalloc+0x118>)
 800153e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001540:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001544:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001546:	682f      	ldr	r7, [r5, #0]
 8001548:	4227      	tst	r7, r4
 800154a:	d116      	bne.n	800157a <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 800154c:	2c00      	cmp	r4, #0
 800154e:	d040      	beq.n	80015d2 <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 8001550:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001554:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001556:	bf1c      	itt	ne
 8001558:	f023 0307 	bicne.w	r3, r3, #7
 800155c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800155e:	b163      	cbz	r3, 800157a <pvPortMalloc+0x8a>
 8001560:	4a29      	ldr	r2, [pc, #164]	; (8001608 <pvPortMalloc+0x118>)
 8001562:	6816      	ldr	r6, [r2, #0]
 8001564:	4690      	mov	r8, r2
 8001566:	42b3      	cmp	r3, r6
 8001568:	d807      	bhi.n	800157a <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 800156a:	4a25      	ldr	r2, [pc, #148]	; (8001600 <pvPortMalloc+0x110>)
 800156c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800156e:	6868      	ldr	r0, [r5, #4]
 8001570:	4283      	cmp	r3, r0
 8001572:	d804      	bhi.n	800157e <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8001574:	6809      	ldr	r1, [r1, #0]
 8001576:	428d      	cmp	r5, r1
 8001578:	d107      	bne.n	800158a <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 800157a:	2400      	movs	r4, #0
 800157c:	e029      	b.n	80015d2 <pvPortMalloc+0xe2>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800157e:	682c      	ldr	r4, [r5, #0]
 8001580:	2c00      	cmp	r4, #0
 8001582:	d0f7      	beq.n	8001574 <pvPortMalloc+0x84>
 8001584:	462a      	mov	r2, r5
 8001586:	4625      	mov	r5, r4
 8001588:	e7f1      	b.n	800156e <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800158a:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800158c:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800158e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001590:	1ac2      	subs	r2, r0, r3
 8001592:	2a10      	cmp	r2, #16
 8001594:	d90f      	bls.n	80015b6 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001596:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001598:	0741      	lsls	r1, r0, #29
 800159a:	d008      	beq.n	80015ae <pvPortMalloc+0xbe>
 800159c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015a0:	f383 8811 	msr	BASEPRI, r3
 80015a4:	f3bf 8f6f 	isb	sy
 80015a8:	f3bf 8f4f 	dsb	sy
 80015ac:	e7fe      	b.n	80015ac <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80015ae:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80015b0:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80015b2:	f7ff ff79 	bl	80014a8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80015b6:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80015b8:	4912      	ldr	r1, [pc, #72]	; (8001604 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80015ba:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80015bc:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 80015be:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80015c0:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80015c2:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80015c6:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80015c8:	bf38      	it	cc
 80015ca:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80015cc:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80015ce:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80015d0:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80015d2:	f000 fd59 	bl	8002088 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80015d6:	0763      	lsls	r3, r4, #29
 80015d8:	d008      	beq.n	80015ec <pvPortMalloc+0xfc>
 80015da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015de:	f383 8811 	msr	BASEPRI, r3
 80015e2:	f3bf 8f6f 	isb	sy
 80015e6:	f3bf 8f4f 	dsb	sy
 80015ea:	e7fe      	b.n	80015ea <pvPortMalloc+0xfa>
}
 80015ec:	4620      	mov	r0, r4
 80015ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015f2:	bf00      	nop
 80015f4:	20000048 	.word	0x20000048
 80015f8:	20001fec 	.word	0x20001fec
 80015fc:	2000004c 	.word	0x2000004c
 8001600:	20001ff8 	.word	0x20001ff8
 8001604:	20001ff4 	.word	0x20001ff4
 8001608:	20001ff0 	.word	0x20001ff0

0800160c <vPortFree>:
{
 800160c:	b510      	push	{r4, lr}
	if( pv != NULL )
 800160e:	4604      	mov	r4, r0
 8001610:	b370      	cbz	r0, 8001670 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001612:	4a18      	ldr	r2, [pc, #96]	; (8001674 <vPortFree+0x68>)
 8001614:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001618:	6812      	ldr	r2, [r2, #0]
 800161a:	4213      	tst	r3, r2
 800161c:	d108      	bne.n	8001630 <vPortFree+0x24>
 800161e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001622:	f383 8811 	msr	BASEPRI, r3
 8001626:	f3bf 8f6f 	isb	sy
 800162a:	f3bf 8f4f 	dsb	sy
 800162e:	e7fe      	b.n	800162e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001630:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001634:	b141      	cbz	r1, 8001648 <vPortFree+0x3c>
 8001636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800163a:	f383 8811 	msr	BASEPRI, r3
 800163e:	f3bf 8f6f 	isb	sy
 8001642:	f3bf 8f4f 	dsb	sy
 8001646:	e7fe      	b.n	8001646 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001648:	ea23 0302 	bic.w	r3, r3, r2
 800164c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001650:	f000 fc7a 	bl	8001f48 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001654:	4a08      	ldr	r2, [pc, #32]	; (8001678 <vPortFree+0x6c>)
 8001656:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800165a:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800165c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001660:	440b      	add	r3, r1
 8001662:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001664:	f7ff ff20 	bl	80014a8 <prvInsertBlockIntoFreeList>
}
 8001668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800166c:	f000 bd0c 	b.w	8002088 <xTaskResumeAll>
 8001670:	bd10      	pop	{r4, pc}
 8001672:	bf00      	nop
 8001674:	20001fec 	.word	0x20001fec
 8001678:	20001ff0 	.word	0x20001ff0

0800167c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800167c:	b570      	push	{r4, r5, r6, lr}
 800167e:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001680:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8001682:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001684:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001686:	b942      	cbnz	r2, 800169a <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001688:	6805      	ldr	r5, [r0, #0]
 800168a:	b99d      	cbnz	r5, 80016b4 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800168c:	6840      	ldr	r0, [r0, #4]
 800168e:	f000 ff0b 	bl	80024a8 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8001692:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8001694:	3601      	adds	r6, #1
 8001696:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8001698:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800169a:	b96d      	cbnz	r5, 80016b8 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800169c:	6880      	ldr	r0, [r0, #8]
 800169e:	f001 fb59 	bl	8002d54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80016a2:	68a3      	ldr	r3, [r4, #8]
 80016a4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80016a6:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80016a8:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80016aa:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d301      	bcc.n	80016b4 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80016b0:	6823      	ldr	r3, [r4, #0]
 80016b2:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80016b4:	2000      	movs	r0, #0
 80016b6:	e7ed      	b.n	8001694 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80016b8:	68c0      	ldr	r0, [r0, #12]
 80016ba:	f001 fb4b 	bl	8002d54 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80016be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016c0:	68e2      	ldr	r2, [r4, #12]
 80016c2:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80016c4:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80016c6:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80016c8:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80016ca:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80016cc:	bf3e      	ittt	cc
 80016ce:	6862      	ldrcc	r2, [r4, #4]
 80016d0:	189b      	addcc	r3, r3, r2
 80016d2:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80016d4:	2d02      	cmp	r5, #2
 80016d6:	d1ed      	bne.n	80016b4 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80016d8:	b10e      	cbz	r6, 80016de <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80016da:	3e01      	subs	r6, #1
 80016dc:	e7ea      	b.n	80016b4 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80016de:	4630      	mov	r0, r6
 80016e0:	e7d8      	b.n	8001694 <prvCopyDataToQueue+0x18>

080016e2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80016e2:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80016e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80016e6:	b410      	push	{r4}
 80016e8:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80016ea:	b162      	cbz	r2, 8001706 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80016ec:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80016ee:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80016f0:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80016f2:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80016f4:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80016f6:	bf28      	it	cs
 80016f8:	6819      	ldrcs	r1, [r3, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
}
 80016fa:	bc10      	pop	{r4}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80016fc:	bf28      	it	cs
 80016fe:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001700:	68d9      	ldr	r1, [r3, #12]
 8001702:	f001 bb27 	b.w	8002d54 <memcpy>
}
 8001706:	bc10      	pop	{r4}
 8001708:	4770      	bx	lr

0800170a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800170a:	b570      	push	{r4, r5, r6, lr}
 800170c:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800170e:	f7ff fdd1 	bl	80012b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001712:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001716:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800171a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800171c:	2d00      	cmp	r5, #0
 800171e:	dc14      	bgt.n	800174a <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001720:	23ff      	movs	r3, #255	; 0xff
 8001722:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001726:	f7ff fde7 	bl	80012f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800172a:	f7ff fdc3 	bl	80012b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800172e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001732:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8001736:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001738:	2d00      	cmp	r5, #0
 800173a:	dc12      	bgt.n	8001762 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800173c:	23ff      	movs	r3, #255	; 0xff
 800173e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8001742:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8001746:	f7ff bdd7 	b.w	80012f8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800174a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0e7      	beq.n	8001720 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001750:	4630      	mov	r0, r6
 8001752:	f000 fdbf 	bl	80022d4 <xTaskRemoveFromEventList>
 8001756:	b108      	cbz	r0, 800175c <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8001758:	f000 fe48 	bl	80023ec <vTaskMissedYield>
 800175c:	3d01      	subs	r5, #1
 800175e:	b26d      	sxtb	r5, r5
 8001760:	e7dc      	b.n	800171c <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001762:	6923      	ldr	r3, [r4, #16]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0e9      	beq.n	800173c <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001768:	4630      	mov	r0, r6
 800176a:	f000 fdb3 	bl	80022d4 <xTaskRemoveFromEventList>
 800176e:	b108      	cbz	r0, 8001774 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8001770:	f000 fe3c 	bl	80023ec <vTaskMissedYield>
 8001774:	3d01      	subs	r5, #1
 8001776:	b26d      	sxtb	r5, r5
 8001778:	e7de      	b.n	8001738 <prvUnlockQueue+0x2e>
	...

0800177c <xQueueGenericReset>:
{
 800177c:	b538      	push	{r3, r4, r5, lr}
 800177e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8001780:	4604      	mov	r4, r0
 8001782:	b940      	cbnz	r0, 8001796 <xQueueGenericReset+0x1a>
 8001784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001788:	f383 8811 	msr	BASEPRI, r3
 800178c:	f3bf 8f6f 	isb	sy
 8001790:	f3bf 8f4f 	dsb	sy
 8001794:	e7fe      	b.n	8001794 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8001796:	f7ff fd8d 	bl	80012b4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800179a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800179c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800179e:	6822      	ldr	r2, [r4, #0]
 80017a0:	4343      	muls	r3, r0
 80017a2:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80017a4:	1a1b      	subs	r3, r3, r0
 80017a6:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80017a8:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80017aa:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80017ac:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 80017ae:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80017b0:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80017b2:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 80017b4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80017b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80017bc:	b995      	cbnz	r5, 80017e4 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80017be:	6923      	ldr	r3, [r4, #16]
 80017c0:	b163      	cbz	r3, 80017dc <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80017c2:	f104 0010 	add.w	r0, r4, #16
 80017c6:	f000 fd85 	bl	80022d4 <xTaskRemoveFromEventList>
 80017ca:	b138      	cbz	r0, 80017dc <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 80017cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <xQueueGenericReset+0x7c>)
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	f3bf 8f4f 	dsb	sy
 80017d8:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80017dc:	f7ff fd8c 	bl	80012f8 <vPortExitCritical>
}
 80017e0:	2001      	movs	r0, #1
 80017e2:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80017e4:	f104 0010 	add.w	r0, r4, #16
 80017e8:	f7ff fcd6 	bl	8001198 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80017ec:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80017f0:	f7ff fcd2 	bl	8001198 <vListInitialise>
 80017f4:	e7f2      	b.n	80017dc <xQueueGenericReset+0x60>
 80017f6:	bf00      	nop
 80017f8:	e000ed04 	.word	0xe000ed04

080017fc <xQueueGenericCreate>:
	{
 80017fc:	b570      	push	{r4, r5, r6, lr}
 80017fe:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001800:	4606      	mov	r6, r0
 8001802:	b940      	cbnz	r0, 8001816 <xQueueGenericCreate+0x1a>
 8001804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001808:	f383 8811 	msr	BASEPRI, r3
 800180c:	f3bf 8f6f 	isb	sy
 8001810:	f3bf 8f4f 	dsb	sy
 8001814:	e7fe      	b.n	8001814 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001816:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001818:	3048      	adds	r0, #72	; 0x48
 800181a:	f7ff fe69 	bl	80014f0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800181e:	4604      	mov	r4, r0
 8001820:	b138      	cbz	r0, 8001832 <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8001822:	b945      	cbnz	r5, 8001836 <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001824:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8001826:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001828:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800182a:	2101      	movs	r1, #1
 800182c:	4620      	mov	r0, r4
 800182e:	f7ff ffa5 	bl	800177c <xQueueGenericReset>
	}
 8001832:	4620      	mov	r0, r4
 8001834:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001836:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800183a:	6003      	str	r3, [r0, #0]
 800183c:	e7f3      	b.n	8001826 <xQueueGenericCreate+0x2a>
	...

08001840 <xQueueGenericSend>:
{
 8001840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001844:	4689      	mov	r9, r1
 8001846:	9201      	str	r2, [sp, #4]
 8001848:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800184a:	4604      	mov	r4, r0
 800184c:	b940      	cbnz	r0, 8001860 <xQueueGenericSend+0x20>
 800184e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001852:	f383 8811 	msr	BASEPRI, r3
 8001856:	f3bf 8f6f 	isb	sy
 800185a:	f3bf 8f4f 	dsb	sy
 800185e:	e7fe      	b.n	800185e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001860:	2900      	cmp	r1, #0
 8001862:	f040 8088 	bne.w	8001976 <xQueueGenericSend+0x136>
 8001866:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001868:	2b00      	cmp	r3, #0
 800186a:	f000 8084 	beq.w	8001976 <xQueueGenericSend+0x136>
 800186e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001872:	f383 8811 	msr	BASEPRI, r3
 8001876:	f3bf 8f6f 	isb	sy
 800187a:	f3bf 8f4f 	dsb	sy
 800187e:	e7fe      	b.n	800187e <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001880:	9e01      	ldr	r6, [sp, #4]
 8001882:	2e00      	cmp	r6, #0
 8001884:	f000 8082 	beq.w	800198c <xQueueGenericSend+0x14c>
 8001888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800188c:	f383 8811 	msr	BASEPRI, r3
 8001890:	f3bf 8f6f 	isb	sy
 8001894:	f3bf 8f4f 	dsb	sy
 8001898:	e7fe      	b.n	8001898 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 800189a:	9d01      	ldr	r5, [sp, #4]
 800189c:	b91d      	cbnz	r5, 80018a6 <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 800189e:	f7ff fd2b 	bl	80012f8 <vPortExitCritical>
			return errQUEUE_FULL;
 80018a2:	2000      	movs	r0, #0
 80018a4:	e058      	b.n	8001958 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 80018a6:	b916      	cbnz	r6, 80018ae <xQueueGenericSend+0x6e>
					vTaskSetTimeOutState( &xTimeOut );
 80018a8:	a802      	add	r0, sp, #8
 80018aa:	f000 fd55 	bl	8002358 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 80018ae:	f7ff fd23 	bl	80012f8 <vPortExitCritical>
		vTaskSuspendAll();
 80018b2:	f000 fb49 	bl	8001f48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80018b6:	f7ff fcfd 	bl	80012b4 <vPortEnterCritical>
 80018ba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80018be:	2bff      	cmp	r3, #255	; 0xff
 80018c0:	bf08      	it	eq
 80018c2:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 80018c6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80018ca:	2bff      	cmp	r3, #255	; 0xff
 80018cc:	bf08      	it	eq
 80018ce:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 80018d2:	f7ff fd11 	bl	80012f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80018d6:	a901      	add	r1, sp, #4
 80018d8:	a802      	add	r0, sp, #8
 80018da:	f000 fd4d 	bl	8002378 <xTaskCheckForTimeOut>
 80018de:	2800      	cmp	r0, #0
 80018e0:	d143      	bne.n	800196a <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80018e2:	f7ff fce7 	bl	80012b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80018e6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80018e8:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80018ea:	f7ff fd05 	bl	80012f8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80018ee:	42ae      	cmp	r6, r5
 80018f0:	d135      	bne.n	800195e <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80018f2:	9901      	ldr	r1, [sp, #4]
 80018f4:	f104 0010 	add.w	r0, r4, #16
 80018f8:	f000 fcb2 	bl	8002260 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80018fc:	4620      	mov	r0, r4
 80018fe:	f7ff ff04 	bl	800170a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001902:	f000 fbc1 	bl	8002088 <xTaskResumeAll>
 8001906:	b938      	cbnz	r0, 8001918 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8001908:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800190c:	f8ca 3000 	str.w	r3, [sl]
 8001910:	f3bf 8f4f 	dsb	sy
 8001914:	f3bf 8f6f 	isb	sy
 8001918:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800191a:	f7ff fccb 	bl	80012b4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800191e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001920:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001922:	429a      	cmp	r2, r3
 8001924:	d301      	bcc.n	800192a <xQueueGenericSend+0xea>
 8001926:	2f02      	cmp	r7, #2
 8001928:	d1b7      	bne.n	800189a <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800192a:	463a      	mov	r2, r7
 800192c:	4649      	mov	r1, r9
 800192e:	4620      	mov	r0, r4
 8001930:	f7ff fea4 	bl	800167c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001934:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001936:	b11b      	cbz	r3, 8001940 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001938:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800193c:	f000 fcca 	bl	80022d4 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8001940:	b138      	cbz	r0, 8001952 <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 8001942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001946:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <xQueueGenericSend+0x168>)
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	f3bf 8f4f 	dsb	sy
 800194e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001952:	f7ff fcd1 	bl	80012f8 <vPortExitCritical>
				return pdPASS;
 8001956:	2001      	movs	r0, #1
}
 8001958:	b004      	add	sp, #16
 800195a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 800195e:	4620      	mov	r0, r4
 8001960:	f7ff fed3 	bl	800170a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001964:	f000 fb90 	bl	8002088 <xTaskResumeAll>
 8001968:	e7d6      	b.n	8001918 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 800196a:	4620      	mov	r0, r4
 800196c:	f7ff fecd 	bl	800170a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001970:	f000 fb8a 	bl	8002088 <xTaskResumeAll>
 8001974:	e795      	b.n	80018a2 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001976:	2f02      	cmp	r7, #2
 8001978:	d102      	bne.n	8001980 <xQueueGenericSend+0x140>
 800197a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800197c:	2b01      	cmp	r3, #1
 800197e:	d10a      	bne.n	8001996 <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001980:	f000 fd3a 	bl	80023f8 <xTaskGetSchedulerState>
 8001984:	2800      	cmp	r0, #0
 8001986:	f43f af7b 	beq.w	8001880 <xQueueGenericSend+0x40>
 800198a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800198c:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8001990:	f8df a014 	ldr.w	sl, [pc, #20]	; 80019a8 <xQueueGenericSend+0x168>
 8001994:	e7c1      	b.n	800191a <xQueueGenericSend+0xda>
 8001996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800199a:	f383 8811 	msr	BASEPRI, r3
 800199e:	f3bf 8f6f 	isb	sy
 80019a2:	f3bf 8f4f 	dsb	sy
 80019a6:	e7fe      	b.n	80019a6 <xQueueGenericSend+0x166>
 80019a8:	e000ed04 	.word	0xe000ed04

080019ac <xQueueGenericSendFromISR>:
{
 80019ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019b0:	4688      	mov	r8, r1
 80019b2:	4691      	mov	r9, r2
 80019b4:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80019b6:	4604      	mov	r4, r0
 80019b8:	b940      	cbnz	r0, 80019cc <xQueueGenericSendFromISR+0x20>
 80019ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019be:	f383 8811 	msr	BASEPRI, r3
 80019c2:	f3bf 8f6f 	isb	sy
 80019c6:	f3bf 8f4f 	dsb	sy
 80019ca:	e7fe      	b.n	80019ca <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80019cc:	bb09      	cbnz	r1, 8001a12 <xQueueGenericSendFromISR+0x66>
 80019ce:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80019d0:	b1fb      	cbz	r3, 8001a12 <xQueueGenericSendFromISR+0x66>
 80019d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019d6:	f383 8811 	msr	BASEPRI, r3
 80019da:	f3bf 8f6f 	isb	sy
 80019de:	f3bf 8f4f 	dsb	sy
 80019e2:	e7fe      	b.n	80019e2 <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80019e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80019e8:	f000 fc74 	bl	80022d4 <xTaskRemoveFromEventList>
 80019ec:	2800      	cmp	r0, #0
 80019ee:	d034      	beq.n	8001a5a <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
 80019f0:	f1b9 0f00 	cmp.w	r9, #0
 80019f4:	d031      	beq.n	8001a5a <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80019f6:	2001      	movs	r0, #1
 80019f8:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 80019fc:	f386 8811 	msr	BASEPRI, r6
}
 8001a00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001a04:	3501      	adds	r5, #1
 8001a06:	b26d      	sxtb	r5, r5
 8001a08:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8001a0c:	e025      	b.n	8001a5a <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
 8001a0e:	2000      	movs	r0, #0
 8001a10:	e7f4      	b.n	80019fc <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001a12:	2f02      	cmp	r7, #2
 8001a14:	d102      	bne.n	8001a1c <xQueueGenericSendFromISR+0x70>
 8001a16:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d120      	bne.n	8001a5e <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001a1c:	f7ff fd16 	bl	800144c <vPortValidateInterruptPriority>
	__asm volatile
 8001a20:	f3ef 8611 	mrs	r6, BASEPRI
 8001a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a28:	f383 8811 	msr	BASEPRI, r3
 8001a2c:	f3bf 8f6f 	isb	sy
 8001a30:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001a34:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001a36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d301      	bcc.n	8001a40 <xQueueGenericSendFromISR+0x94>
 8001a3c:	2f02      	cmp	r7, #2
 8001a3e:	d1e6      	bne.n	8001a0e <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 8001a40:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001a44:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 8001a46:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001a48:	4641      	mov	r1, r8
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	f7ff fe16 	bl	800167c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8001a50:	1c6b      	adds	r3, r5, #1
 8001a52:	d1d7      	bne.n	8001a04 <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1c4      	bne.n	80019e4 <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	e7ce      	b.n	80019fc <xQueueGenericSendFromISR+0x50>
	__asm volatile
 8001a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a62:	f383 8811 	msr	BASEPRI, r3
 8001a66:	f3bf 8f6f 	isb	sy
 8001a6a:	f3bf 8f4f 	dsb	sy
 8001a6e:	e7fe      	b.n	8001a6e <xQueueGenericSendFromISR+0xc2>

08001a70 <xQueueGenericReceive>:
{
 8001a70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001a74:	4688      	mov	r8, r1
 8001a76:	9201      	str	r2, [sp, #4]
 8001a78:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 8001a7a:	4604      	mov	r4, r0
 8001a7c:	b940      	cbnz	r0, 8001a90 <xQueueGenericReceive+0x20>
 8001a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a82:	f383 8811 	msr	BASEPRI, r3
 8001a86:	f3bf 8f6f 	isb	sy
 8001a8a:	f3bf 8f4f 	dsb	sy
 8001a8e:	e7fe      	b.n	8001a8e <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001a90:	2900      	cmp	r1, #0
 8001a92:	f040 80a5 	bne.w	8001be0 <xQueueGenericReceive+0x170>
 8001a96:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 80a1 	beq.w	8001be0 <xQueueGenericReceive+0x170>
 8001a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aa2:	f383 8811 	msr	BASEPRI, r3
 8001aa6:	f3bf 8f6f 	isb	sy
 8001aaa:	f3bf 8f4f 	dsb	sy
 8001aae:	e7fe      	b.n	8001aae <xQueueGenericReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001ab0:	9e01      	ldr	r6, [sp, #4]
 8001ab2:	2e00      	cmp	r6, #0
 8001ab4:	f000 809a 	beq.w	8001bec <xQueueGenericReceive+0x17c>
 8001ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001abc:	f383 8811 	msr	BASEPRI, r3
 8001ac0:	f3bf 8f6f 	isb	sy
 8001ac4:	f3bf 8f4f 	dsb	sy
 8001ac8:	e7fe      	b.n	8001ac8 <xQueueGenericReceive+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001aca:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8001acc:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d06d      	beq.n	8001bae <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ad2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001ad6:	e05f      	b.n	8001b98 <xQueueGenericReceive+0x128>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001ad8:	9d01      	ldr	r5, [sp, #4]
 8001ada:	b91d      	cbnz	r5, 8001ae4 <xQueueGenericReceive+0x74>
					taskEXIT_CRITICAL();
 8001adc:	f7ff fc0c 	bl	80012f8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8001ae0:	4628      	mov	r0, r5
 8001ae2:	e067      	b.n	8001bb4 <xQueueGenericReceive+0x144>
				else if( xEntryTimeSet == pdFALSE )
 8001ae4:	b916      	cbnz	r6, 8001aec <xQueueGenericReceive+0x7c>
					vTaskSetTimeOutState( &xTimeOut );
 8001ae6:	a802      	add	r0, sp, #8
 8001ae8:	f000 fc36 	bl	8002358 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8001aec:	f7ff fc04 	bl	80012f8 <vPortExitCritical>
		vTaskSuspendAll();
 8001af0:	f000 fa2a 	bl	8001f48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001af4:	f7ff fbde 	bl	80012b4 <vPortEnterCritical>
 8001af8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001afc:	2bff      	cmp	r3, #255	; 0xff
 8001afe:	bf08      	it	eq
 8001b00:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8001b04:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001b08:	2bff      	cmp	r3, #255	; 0xff
 8001b0a:	bf08      	it	eq
 8001b0c:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8001b10:	f7ff fbf2 	bl	80012f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001b14:	a901      	add	r1, sp, #4
 8001b16:	a802      	add	r0, sp, #8
 8001b18:	f000 fc2e 	bl	8002378 <xTaskCheckForTimeOut>
 8001b1c:	2800      	cmp	r0, #0
 8001b1e:	d152      	bne.n	8001bc6 <xQueueGenericReceive+0x156>
	taskENTER_CRITICAL();
 8001b20:	f7ff fbc8 	bl	80012b4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001b24:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8001b26:	f7ff fbe7 	bl	80012f8 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001b2a:	2d00      	cmp	r5, #0
 8001b2c:	d145      	bne.n	8001bba <xQueueGenericReceive+0x14a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001b2e:	6823      	ldr	r3, [r4, #0]
 8001b30:	b933      	cbnz	r3, 8001b40 <xQueueGenericReceive+0xd0>
						taskENTER_CRITICAL();
 8001b32:	f7ff fbbf 	bl	80012b4 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8001b36:	6860      	ldr	r0, [r4, #4]
 8001b38:	f000 fc6e 	bl	8002418 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8001b3c:	f7ff fbdc 	bl	80012f8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001b40:	9901      	ldr	r1, [sp, #4]
 8001b42:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001b46:	f000 fb8b 	bl	8002260 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	f7ff fddd 	bl	800170a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001b50:	f000 fa9a 	bl	8002088 <xTaskResumeAll>
 8001b54:	b938      	cbnz	r0, 8001b66 <xQueueGenericReceive+0xf6>
					portYIELD_WITHIN_API();
 8001b56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b5a:	f8ca 3000 	str.w	r3, [sl]
 8001b5e:	f3bf 8f4f 	dsb	sy
 8001b62:	f3bf 8f6f 	isb	sy
 8001b66:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8001b68:	f7ff fba4 	bl	80012b4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001b6c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001b6e:	2d00      	cmp	r5, #0
 8001b70:	d0b2      	beq.n	8001ad8 <xQueueGenericReceive+0x68>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001b72:	4641      	mov	r1, r8
 8001b74:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8001b76:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001b78:	f7ff fdb3 	bl	80016e2 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8001b7c:	f1b9 0f00 	cmp.w	r9, #0
 8001b80:	d1a3      	bne.n	8001aca <xQueueGenericReceive+0x5a>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001b82:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8001b84:	3d01      	subs	r5, #1
 8001b86:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001b88:	b913      	cbnz	r3, 8001b90 <xQueueGenericReceive+0x120>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8001b8a:	f000 fcdd 	bl	8002548 <pvTaskIncrementMutexHeldCount>
 8001b8e:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b90:	6923      	ldr	r3, [r4, #16]
 8001b92:	b163      	cbz	r3, 8001bae <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b94:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b98:	f000 fb9c 	bl	80022d4 <xTaskRemoveFromEventList>
 8001b9c:	b138      	cbz	r0, 8001bae <xQueueGenericReceive+0x13e>
							queueYIELD_IF_USING_PREEMPTION();
 8001b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ba2:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <xQueueGenericReceive+0x184>)
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	f3bf 8f4f 	dsb	sy
 8001baa:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001bae:	f7ff fba3 	bl	80012f8 <vPortExitCritical>
				return pdPASS;
 8001bb2:	2001      	movs	r0, #1
}
 8001bb4:	b004      	add	sp, #16
 8001bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8001bba:	4620      	mov	r0, r4
 8001bbc:	f7ff fda5 	bl	800170a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001bc0:	f000 fa62 	bl	8002088 <xTaskResumeAll>
 8001bc4:	e7cf      	b.n	8001b66 <xQueueGenericReceive+0xf6>
			prvUnlockQueue( pxQueue );
 8001bc6:	4620      	mov	r0, r4
 8001bc8:	f7ff fd9f 	bl	800170a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001bcc:	f000 fa5c 	bl	8002088 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8001bd0:	f7ff fb70 	bl	80012b4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001bd4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8001bd6:	f7ff fb8f 	bl	80012f8 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001bda:	2d00      	cmp	r5, #0
 8001bdc:	d1c3      	bne.n	8001b66 <xQueueGenericReceive+0xf6>
 8001bde:	e77f      	b.n	8001ae0 <xQueueGenericReceive+0x70>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001be0:	f000 fc0a 	bl	80023f8 <xTaskGetSchedulerState>
 8001be4:	2800      	cmp	r0, #0
 8001be6:	f43f af63 	beq.w	8001ab0 <xQueueGenericReceive+0x40>
 8001bea:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8001bec:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8001bee:	f8df a004 	ldr.w	sl, [pc, #4]	; 8001bf4 <xQueueGenericReceive+0x184>
 8001bf2:	e7b9      	b.n	8001b68 <xQueueGenericReceive+0xf8>
 8001bf4:	e000ed04 	.word	0xe000ed04

08001bf8 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001bf8:	2300      	movs	r3, #0
	{
 8001bfa:	b530      	push	{r4, r5, lr}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <vQueueAddToRegistry+0x20>)
 8001bfe:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8001c02:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8001c06:	b91d      	cbnz	r5, 8001c10 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001c08:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001c0c:	6060      	str	r0, [r4, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001c0e:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001c10:	3301      	adds	r3, #1
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d1f3      	bne.n	8001bfe <vQueueAddToRegistry+0x6>
 8001c16:	bd30      	pop	{r4, r5, pc}
 8001c18:	2000216c 	.word	0x2000216c

08001c1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001c1c:	b570      	push	{r4, r5, r6, lr}
 8001c1e:	4604      	mov	r4, r0
 8001c20:	460d      	mov	r5, r1
 8001c22:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001c24:	f7ff fb46 	bl	80012b4 <vPortEnterCritical>
 8001c28:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001c2c:	2bff      	cmp	r3, #255	; 0xff
 8001c2e:	bf04      	itt	eq
 8001c30:	2300      	moveq	r3, #0
 8001c32:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8001c36:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001c3a:	2bff      	cmp	r3, #255	; 0xff
 8001c3c:	bf04      	itt	eq
 8001c3e:	2300      	moveq	r3, #0
 8001c40:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8001c44:	f7ff fb58 	bl	80012f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001c48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c4a:	b92b      	cbnz	r3, 8001c58 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001c4c:	4632      	mov	r2, r6
 8001c4e:	4629      	mov	r1, r5
 8001c50:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001c54:	f000 fb1e 	bl	8002294 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001c58:	4620      	mov	r0, r4
	}
 8001c5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8001c5e:	f7ff bd54 	b.w	800170a <prvUnlockQueue>
	...

08001c64 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c64:	4a06      	ldr	r2, [pc, #24]	; (8001c80 <prvResetNextTaskUnblockTime+0x1c>)
 8001c66:	6813      	ldr	r3, [r2, #0]
 8001c68:	6819      	ldr	r1, [r3, #0]
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <prvResetNextTaskUnblockTime+0x20>)
 8001c6c:	b919      	cbnz	r1, 8001c76 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001c6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001c7a:	68d2      	ldr	r2, [r2, #12]
 8001c7c:	6852      	ldr	r2, [r2, #4]
 8001c7e:	e7f8      	b.n	8001c72 <prvResetNextTaskUnblockTime+0xe>
 8001c80:	20002004 	.word	0x20002004
 8001c84:	200020dc 	.word	0x200020dc

08001c88 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001c8a:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001c8c:	4e1b      	ldr	r6, [pc, #108]	; (8001cfc <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8001c8e:	681d      	ldr	r5, [r3, #0]
{
 8001c90:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001c92:	6830      	ldr	r0, [r6, #0]
{
 8001c94:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001c96:	3004      	adds	r0, #4
 8001c98:	f7ff faaf 	bl	80011fa <uxListRemove>
 8001c9c:	4633      	mov	r3, r6
 8001c9e:	b940      	cbnz	r0, 8001cb2 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	6831      	ldr	r1, [r6, #0]
 8001ca4:	4e16      	ldr	r6, [pc, #88]	; (8001d00 <prvAddCurrentTaskToDelayedList+0x78>)
 8001ca6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001ca8:	6832      	ldr	r2, [r6, #0]
 8001caa:	4088      	lsls	r0, r1
 8001cac:	ea22 0200 	bic.w	r2, r2, r0
 8001cb0:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001cb2:	1c62      	adds	r2, r4, #1
 8001cb4:	d107      	bne.n	8001cc6 <prvAddCurrentTaskToDelayedList+0x3e>
 8001cb6:	b137      	cbz	r7, 8001cc6 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001cb8:	6819      	ldr	r1, [r3, #0]
 8001cba:	4812      	ldr	r0, [pc, #72]	; (8001d04 <prvAddCurrentTaskToDelayedList+0x7c>)
 8001cbc:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001cbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001cc2:	f7ff ba77 	b.w	80011b4 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001cc6:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001cc8:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8001cca:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001ccc:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8001cce:	d907      	bls.n	8001ce0 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001cd0:	4a0d      	ldr	r2, [pc, #52]	; (8001d08 <prvAddCurrentTaskToDelayedList+0x80>)
 8001cd2:	6810      	ldr	r0, [r2, #0]
 8001cd4:	6819      	ldr	r1, [r3, #0]
}
 8001cd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001cda:	3104      	adds	r1, #4
 8001cdc:	f7ff ba76 	b.w	80011cc <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001ce0:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <prvAddCurrentTaskToDelayedList+0x84>)
 8001ce2:	6810      	ldr	r0, [r2, #0]
 8001ce4:	6819      	ldr	r1, [r3, #0]
 8001ce6:	3104      	adds	r1, #4
 8001ce8:	f7ff fa70 	bl	80011cc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001cec:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <prvAddCurrentTaskToDelayedList+0x88>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8001cf2:	bf38      	it	cc
 8001cf4:	601c      	strcc	r4, [r3, #0]
 8001cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cf8:	20002124 	.word	0x20002124
 8001cfc:	20002000 	.word	0x20002000
 8001d00:	200020ac 	.word	0x200020ac
 8001d04:	200020fc 	.word	0x200020fc
 8001d08:	20002008 	.word	0x20002008
 8001d0c:	20002004 	.word	0x20002004
 8001d10:	200020dc 	.word	0x200020dc

08001d14 <prvTaskIsTaskSuspended.part.0>:
 8001d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d18:	f383 8811 	msr	BASEPRI, r3
 8001d1c:	f3bf 8f6f 	isb	sy
 8001d20:	f3bf 8f4f 	dsb	sy
 8001d24:	e7fe      	b.n	8001d24 <prvTaskIsTaskSuspended.part.0+0x10>
	...

08001d28 <xTaskCreate>:
	{
 8001d28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d2c:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8001d30:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d32:	4650      	mov	r0, sl
	{
 8001d34:	460f      	mov	r7, r1
 8001d36:	4699      	mov	r9, r3
 8001d38:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d3a:	f7ff fbd9 	bl	80014f0 <pvPortMalloc>
			if( pxStack != NULL )
 8001d3e:	4605      	mov	r5, r0
 8001d40:	2800      	cmp	r0, #0
 8001d42:	f000 8096 	beq.w	8001e72 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001d46:	2054      	movs	r0, #84	; 0x54
 8001d48:	f7ff fbd2 	bl	80014f0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8001d4c:	4604      	mov	r4, r0
 8001d4e:	2800      	cmp	r0, #0
 8001d50:	f000 808c 	beq.w	8001e6c <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001d54:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8001d58:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001d5a:	4455      	add	r5, sl
 8001d5c:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001d5e:	f025 0a07 	bic.w	sl, r5, #7
 8001d62:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8001d66:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001d68:	7859      	ldrb	r1, [r3, #1]
 8001d6a:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8001d6e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001d72:	b109      	cbz	r1, 8001d78 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d74:	42bb      	cmp	r3, r7
 8001d76:	d1f7      	bne.n	8001d68 <xTaskCreate+0x40>
 8001d78:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001d7a:	f04f 0b00 	mov.w	fp, #0
 8001d7e:	2d06      	cmp	r5, #6
 8001d80:	bf28      	it	cs
 8001d82:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001d84:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8001d86:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001d88:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001d8a:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001d8c:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8001d90:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001d94:	f7ff fa0b 	bl	80011ae <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d98:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001d9c:	f104 0018 	add.w	r0, r4, #24
 8001da0:	f7ff fa05 	bl	80011ae <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001da4:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001da8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001daa:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001dac:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001dae:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001db2:	464a      	mov	r2, r9
 8001db4:	4641      	mov	r1, r8
 8001db6:	4650      	mov	r0, sl
 8001db8:	f7ff fa58 	bl	800126c <pxPortInitialiseStack>
 8001dbc:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8001dbe:	b106      	cbz	r6, 8001dc2 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001dc0:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8001dc2:	f7ff fa77 	bl	80012b4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001dc6:	4b32      	ldr	r3, [pc, #200]	; (8001e90 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8001dc8:	4e32      	ldr	r6, [pc, #200]	; (8001e94 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8001ec0 <xTaskCreate+0x198>
 8001dd0:	3201      	adds	r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001dd4:	6835      	ldr	r5, [r6, #0]
 8001dd6:	2d00      	cmp	r5, #0
 8001dd8:	d14e      	bne.n	8001e78 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8001dda:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d11d      	bne.n	8001e1e <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001de2:	eb08 0005 	add.w	r0, r8, r5
 8001de6:	3514      	adds	r5, #20
 8001de8:	f7ff f9d6 	bl	8001198 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001dec:	2d8c      	cmp	r5, #140	; 0x8c
 8001dee:	d1f8      	bne.n	8001de2 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8001df0:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8001ec4 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8001df4:	4d28      	ldr	r5, [pc, #160]	; (8001e98 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8001df6:	4648      	mov	r0, r9
 8001df8:	f7ff f9ce 	bl	8001198 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001dfc:	4628      	mov	r0, r5
 8001dfe:	f7ff f9cb 	bl	8001198 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001e02:	4826      	ldr	r0, [pc, #152]	; (8001e9c <xTaskCreate+0x174>)
 8001e04:	f7ff f9c8 	bl	8001198 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001e08:	4825      	ldr	r0, [pc, #148]	; (8001ea0 <xTaskCreate+0x178>)
 8001e0a:	f7ff f9c5 	bl	8001198 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8001e0e:	4825      	ldr	r0, [pc, #148]	; (8001ea4 <xTaskCreate+0x17c>)
 8001e10:	f7ff f9c2 	bl	8001198 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001e14:	4b24      	ldr	r3, [pc, #144]	; (8001ea8 <xTaskCreate+0x180>)
 8001e16:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001e1a:	4b24      	ldr	r3, [pc, #144]	; (8001eac <xTaskCreate+0x184>)
 8001e1c:	601d      	str	r5, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001e1e:	2501      	movs	r5, #1
		uxTaskNumber++;
 8001e20:	4a23      	ldr	r2, [pc, #140]	; (8001eb0 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8001e22:	4924      	ldr	r1, [pc, #144]	; (8001eb4 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8001e24:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001e26:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8001e28:	3301      	adds	r3, #1
 8001e2a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001e2c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e2e:	fa05 f302 	lsl.w	r3, r5, r2
 8001e32:	4303      	orrs	r3, r0
 8001e34:	2014      	movs	r0, #20
 8001e36:	600b      	str	r3, [r1, #0]
 8001e38:	fb00 8002 	mla	r0, r0, r2, r8
 8001e3c:	4639      	mov	r1, r7
 8001e3e:	f7ff f9b9 	bl	80011b4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001e42:	f7ff fa59 	bl	80012f8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001e46:	4b1c      	ldr	r3, [pc, #112]	; (8001eb8 <xTaskCreate+0x190>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	b163      	cbz	r3, 8001e66 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001e4c:	6833      	ldr	r3, [r6, #0]
 8001e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d207      	bcs.n	8001e66 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8001e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e5a:	4b18      	ldr	r3, [pc, #96]	; (8001ebc <xTaskCreate+0x194>)
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	f3bf 8f4f 	dsb	sy
 8001e62:	f3bf 8f6f 	isb	sy
	}
 8001e66:	4628      	mov	r0, r5
 8001e68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8001e6c:	4628      	mov	r0, r5
 8001e6e:	f7ff fbcd 	bl	800160c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001e72:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001e76:	e7f6      	b.n	8001e66 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8001e78:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <xTaskCreate+0x190>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1ce      	bne.n	8001e1e <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001e80:	6833      	ldr	r3, [r6, #0]
 8001e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001e86:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001e88:	bf98      	it	ls
 8001e8a:	6034      	strls	r4, [r6, #0]
 8001e8c:	e7c7      	b.n	8001e1e <xTaskCreate+0xf6>
 8001e8e:	bf00      	nop
 8001e90:	20002098 	.word	0x20002098
 8001e94:	20002000 	.word	0x20002000
 8001e98:	200020c4 	.word	0x200020c4
 8001e9c:	200020e4 	.word	0x200020e4
 8001ea0:	20002110 	.word	0x20002110
 8001ea4:	200020fc 	.word	0x200020fc
 8001ea8:	20002004 	.word	0x20002004
 8001eac:	20002008 	.word	0x20002008
 8001eb0:	200020a8 	.word	0x200020a8
 8001eb4:	200020ac 	.word	0x200020ac
 8001eb8:	200020f8 	.word	0x200020f8
 8001ebc:	e000ed04 	.word	0xe000ed04
 8001ec0:	2000200c 	.word	0x2000200c
 8001ec4:	200020b0 	.word	0x200020b0

08001ec8 <vTaskStartScheduler>:
{
 8001ec8:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8001eca:	2400      	movs	r4, #0
 8001ecc:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <vTaskStartScheduler+0x68>)
 8001ece:	9400      	str	r4, [sp, #0]
 8001ed0:	9301      	str	r3, [sp, #4]
 8001ed2:	2280      	movs	r2, #128	; 0x80
 8001ed4:	4623      	mov	r3, r4
 8001ed6:	4917      	ldr	r1, [pc, #92]	; (8001f34 <vTaskStartScheduler+0x6c>)
 8001ed8:	4817      	ldr	r0, [pc, #92]	; (8001f38 <vTaskStartScheduler+0x70>)
 8001eda:	f7ff ff25 	bl	8001d28 <xTaskCreate>
		if( xReturn == pdPASS )
 8001ede:	2801      	cmp	r0, #1
 8001ee0:	d118      	bne.n	8001f14 <vTaskStartScheduler+0x4c>
			xReturn = xTimerCreateTimerTask();
 8001ee2:	f000 fb87 	bl	80025f4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8001ee6:	2801      	cmp	r0, #1
 8001ee8:	d114      	bne.n	8001f14 <vTaskStartScheduler+0x4c>
 8001eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eee:	f383 8811 	msr	BASEPRI, r3
 8001ef2:	f3bf 8f6f 	isb	sy
 8001ef6:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8001efa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001efe:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <vTaskStartScheduler+0x74>)
 8001f00:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001f02:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <vTaskStartScheduler+0x78>)
 8001f04:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001f06:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <vTaskStartScheduler+0x7c>)
 8001f08:	601c      	str	r4, [r3, #0]
}
 8001f0a:	b002      	add	sp, #8
 8001f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8001f10:	f7ff ba52 	b.w	80013b8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001f14:	3001      	adds	r0, #1
 8001f16:	d108      	bne.n	8001f2a <vTaskStartScheduler+0x62>
 8001f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f1c:	f383 8811 	msr	BASEPRI, r3
 8001f20:	f3bf 8f6f 	isb	sy
 8001f24:	f3bf 8f4f 	dsb	sy
 8001f28:	e7fe      	b.n	8001f28 <vTaskStartScheduler+0x60>
}
 8001f2a:	b002      	add	sp, #8
 8001f2c:	bd10      	pop	{r4, pc}
 8001f2e:	bf00      	nop
 8001f30:	200020d8 	.word	0x200020d8
 8001f34:	08002dcc 	.word	0x08002dcc
 8001f38:	08002179 	.word	0x08002179
 8001f3c:	200020dc 	.word	0x200020dc
 8001f40:	200020f8 	.word	0x200020f8
 8001f44:	20002124 	.word	0x20002124

08001f48 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001f48:	4a02      	ldr	r2, [pc, #8]	; (8001f54 <vTaskSuspendAll+0xc>)
 8001f4a:	6813      	ldr	r3, [r2, #0]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	6013      	str	r3, [r2, #0]
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	200020a4 	.word	0x200020a4

08001f58 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8001f58:	4b01      	ldr	r3, [pc, #4]	; (8001f60 <xTaskGetTickCount+0x8>)
 8001f5a:	6818      	ldr	r0, [r3, #0]
}
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20002124 	.word	0x20002124

08001f64 <xTaskIncrementTick>:
{
 8001f64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f68:	4b3c      	ldr	r3, [pc, #240]	; (800205c <xTaskIncrementTick+0xf8>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d153      	bne.n	8002018 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8001f70:	4b3b      	ldr	r3, [pc, #236]	; (8002060 <xTaskIncrementTick+0xfc>)
 8001f72:	681c      	ldr	r4, [r3, #0]
 8001f74:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8001f76:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8001f78:	b9bc      	cbnz	r4, 8001faa <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8001f7a:	4b3a      	ldr	r3, [pc, #232]	; (8002064 <xTaskIncrementTick+0x100>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	b142      	cbz	r2, 8001f94 <xTaskIncrementTick+0x30>
 8001f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f86:	f383 8811 	msr	BASEPRI, r3
 8001f8a:	f3bf 8f6f 	isb	sy
 8001f8e:	f3bf 8f4f 	dsb	sy
 8001f92:	e7fe      	b.n	8001f92 <xTaskIncrementTick+0x2e>
 8001f94:	4a34      	ldr	r2, [pc, #208]	; (8002068 <xTaskIncrementTick+0x104>)
 8001f96:	6819      	ldr	r1, [r3, #0]
 8001f98:	6810      	ldr	r0, [r2, #0]
 8001f9a:	6018      	str	r0, [r3, #0]
 8001f9c:	6011      	str	r1, [r2, #0]
 8001f9e:	4a33      	ldr	r2, [pc, #204]	; (800206c <xTaskIncrementTick+0x108>)
 8001fa0:	6813      	ldr	r3, [r2, #0]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	f7ff fe5d 	bl	8001c64 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001faa:	4d31      	ldr	r5, [pc, #196]	; (8002070 <xTaskIncrementTick+0x10c>)
 8001fac:	f04f 0b00 	mov.w	fp, #0
 8001fb0:	682b      	ldr	r3, [r5, #0]
 8001fb2:	4f30      	ldr	r7, [pc, #192]	; (8002074 <xTaskIncrementTick+0x110>)
 8001fb4:	429c      	cmp	r4, r3
 8001fb6:	d33e      	bcc.n	8002036 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fb8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002064 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8001fbc:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8002084 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fc0:	f8d8 2000 	ldr.w	r2, [r8]
 8001fc4:	6812      	ldr	r2, [r2, #0]
 8001fc6:	bb72      	cbnz	r2, 8002026 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fcc:	602a      	str	r2, [r5, #0]
					break;
 8001fce:	e032      	b.n	8002036 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001fd0:	f106 0a04 	add.w	sl, r6, #4
 8001fd4:	4650      	mov	r0, sl
 8001fd6:	f7ff f910 	bl	80011fa <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001fda:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8001fdc:	b119      	cbz	r1, 8001fe6 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001fde:	f106 0018 	add.w	r0, r6, #24
 8001fe2:	f7ff f90a 	bl	80011fa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f04f 0e14 	mov.w	lr, #20
 8001fec:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001fee:	f8d9 3000 	ldr.w	r3, [r9]
 8001ff2:	fa02 f100 	lsl.w	r1, r2, r0
 8001ff6:	4319      	orrs	r1, r3
 8001ff8:	4b1f      	ldr	r3, [pc, #124]	; (8002078 <xTaskIncrementTick+0x114>)
 8001ffa:	f8c9 1000 	str.w	r1, [r9]
 8001ffe:	fb0e 3000 	mla	r0, lr, r0, r3
 8002002:	4651      	mov	r1, sl
 8002004:	f7ff f8d6 	bl	80011b4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002008:	6838      	ldr	r0, [r7, #0]
 800200a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800200c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800200e:	4291      	cmp	r1, r2
 8002010:	bf28      	it	cs
 8002012:	f04f 0b01 	movcs.w	fp, #1
 8002016:	e7d3      	b.n	8001fc0 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8002018:	4a18      	ldr	r2, [pc, #96]	; (800207c <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 800201a:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 800201e:	6813      	ldr	r3, [r2, #0]
 8002020:	3301      	adds	r3, #1
 8002022:	6013      	str	r3, [r2, #0]
 8002024:	e011      	b.n	800204a <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002026:	f8d8 2000 	ldr.w	r2, [r8]
 800202a:	68d2      	ldr	r2, [r2, #12]
 800202c:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800202e:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002030:	428c      	cmp	r4, r1
 8002032:	d2cd      	bcs.n	8001fd0 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8002034:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <xTaskIncrementTick+0x114>)
 800203a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800203c:	2214      	movs	r2, #20
 800203e:	434a      	muls	r2, r1
 8002040:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8002042:	2a02      	cmp	r2, #2
 8002044:	bf28      	it	cs
 8002046:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800204a:	4a0d      	ldr	r2, [pc, #52]	; (8002080 <xTaskIncrementTick+0x11c>)
 800204c:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800204e:	2a00      	cmp	r2, #0
 8002050:	bf18      	it	ne
 8002052:	f04f 0b01 	movne.w	fp, #1
}
 8002056:	4658      	mov	r0, fp
 8002058:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800205c:	200020a4 	.word	0x200020a4
 8002060:	20002124 	.word	0x20002124
 8002064:	20002004 	.word	0x20002004
 8002068:	20002008 	.word	0x20002008
 800206c:	200020e0 	.word	0x200020e0
 8002070:	200020dc 	.word	0x200020dc
 8002074:	20002000 	.word	0x20002000
 8002078:	2000200c 	.word	0x2000200c
 800207c:	200020a0 	.word	0x200020a0
 8002080:	20002128 	.word	0x20002128
 8002084:	200020ac 	.word	0x200020ac

08002088 <xTaskResumeAll>:
{
 8002088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 800208c:	4c31      	ldr	r4, [pc, #196]	; (8002154 <xTaskResumeAll+0xcc>)
 800208e:	6823      	ldr	r3, [r4, #0]
 8002090:	b943      	cbnz	r3, 80020a4 <xTaskResumeAll+0x1c>
 8002092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002096:	f383 8811 	msr	BASEPRI, r3
 800209a:	f3bf 8f6f 	isb	sy
 800209e:	f3bf 8f4f 	dsb	sy
 80020a2:	e7fe      	b.n	80020a2 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80020a4:	f7ff f906 	bl	80012b4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80020a8:	6823      	ldr	r3, [r4, #0]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020ae:	6824      	ldr	r4, [r4, #0]
 80020b0:	b12c      	cbz	r4, 80020be <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80020b2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80020b4:	f7ff f920 	bl	80012f8 <vPortExitCritical>
}
 80020b8:	4620      	mov	r0, r4
 80020ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80020be:	4b26      	ldr	r3, [pc, #152]	; (8002158 <xTaskResumeAll+0xd0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f5      	beq.n	80020b2 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80020c6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8002170 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 80020ca:	4f24      	ldr	r7, [pc, #144]	; (800215c <xTaskResumeAll+0xd4>)
 80020cc:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002174 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80020d0:	f8d9 3000 	ldr.w	r3, [r9]
 80020d4:	b9e3      	cbnz	r3, 8002110 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 80020d6:	b10c      	cbz	r4, 80020dc <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 80020d8:	f7ff fdc4 	bl	8001c64 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80020dc:	4d20      	ldr	r5, [pc, #128]	; (8002160 <xTaskResumeAll+0xd8>)
 80020de:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80020e0:	b144      	cbz	r4, 80020f4 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 80020e2:	2701      	movs	r7, #1
 80020e4:	4e1f      	ldr	r6, [pc, #124]	; (8002164 <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 80020e6:	f7ff ff3d 	bl	8001f64 <xTaskIncrementTick>
 80020ea:	b100      	cbz	r0, 80020ee <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 80020ec:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80020ee:	3c01      	subs	r4, #1
 80020f0:	d1f9      	bne.n	80020e6 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 80020f2:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80020f4:	4b1b      	ldr	r3, [pc, #108]	; (8002164 <xTaskResumeAll+0xdc>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0da      	beq.n	80020b2 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80020fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002100:	4b19      	ldr	r3, [pc, #100]	; (8002168 <xTaskResumeAll+0xe0>)
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	f3bf 8f4f 	dsb	sy
 8002108:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800210c:	2401      	movs	r4, #1
 800210e:	e7d1      	b.n	80020b4 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002110:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 8002114:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002116:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002118:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800211a:	f104 0018 	add.w	r0, r4, #24
 800211e:	f7ff f86c 	bl	80011fa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002122:	4630      	mov	r0, r6
 8002124:	f7ff f869 	bl	80011fa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002128:	2014      	movs	r0, #20
 800212a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800212c:	6839      	ldr	r1, [r7, #0]
 800212e:	fa05 f302 	lsl.w	r3, r5, r2
 8002132:	430b      	orrs	r3, r1
 8002134:	fb00 8002 	mla	r0, r0, r2, r8
 8002138:	4631      	mov	r1, r6
 800213a:	603b      	str	r3, [r7, #0]
 800213c:	f7ff f83a 	bl	80011b4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002140:	4b0a      	ldr	r3, [pc, #40]	; (800216c <xTaskResumeAll+0xe4>)
 8002142:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002148:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 800214a:	bf24      	itt	cs
 800214c:	4b05      	ldrcs	r3, [pc, #20]	; (8002164 <xTaskResumeAll+0xdc>)
 800214e:	601d      	strcs	r5, [r3, #0]
 8002150:	e7be      	b.n	80020d0 <xTaskResumeAll+0x48>
 8002152:	bf00      	nop
 8002154:	200020a4 	.word	0x200020a4
 8002158:	20002098 	.word	0x20002098
 800215c:	200020ac 	.word	0x200020ac
 8002160:	200020a0 	.word	0x200020a0
 8002164:	20002128 	.word	0x20002128
 8002168:	e000ed04 	.word	0xe000ed04
 800216c:	20002000 	.word	0x20002000
 8002170:	200020e4 	.word	0x200020e4
 8002174:	2000200c 	.word	0x2000200c

08002178 <prvIdleTask>:
{
 8002178:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800217a:	4e17      	ldr	r6, [pc, #92]	; (80021d8 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800217c:	4c17      	ldr	r4, [pc, #92]	; (80021dc <prvIdleTask+0x64>)
 800217e:	6823      	ldr	r3, [r4, #0]
 8002180:	b963      	cbnz	r3, 800219c <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002182:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <prvIdleTask+0x68>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d9f8      	bls.n	800217c <prvIdleTask+0x4>
				taskYIELD();
 800218a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800218e:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <prvIdleTask+0x6c>)
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	f3bf 8f4f 	dsb	sy
 8002196:	f3bf 8f6f 	isb	sy
 800219a:	e7ef      	b.n	800217c <prvIdleTask+0x4>
			vTaskSuspendAll();
 800219c:	f7ff fed4 	bl	8001f48 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80021a0:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 80021a2:	f7ff ff71 	bl	8002088 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 80021a6:	2d00      	cmp	r5, #0
 80021a8:	d0e9      	beq.n	800217e <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 80021aa:	f7ff f883 	bl	80012b4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80021ae:	68f3      	ldr	r3, [r6, #12]
 80021b0:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80021b2:	1d28      	adds	r0, r5, #4
 80021b4:	f7ff f821 	bl	80011fa <uxListRemove>
					--uxCurrentNumberOfTasks;
 80021b8:	4a0b      	ldr	r2, [pc, #44]	; (80021e8 <prvIdleTask+0x70>)
 80021ba:	6813      	ldr	r3, [r2, #0]
 80021bc:	3b01      	subs	r3, #1
 80021be:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80021c0:	6823      	ldr	r3, [r4, #0]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 80021c6:	f7ff f897 	bl	80012f8 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80021ca:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80021cc:	f7ff fa1e 	bl	800160c <vPortFree>
			vPortFree( pxTCB );
 80021d0:	4628      	mov	r0, r5
 80021d2:	f7ff fa1b 	bl	800160c <vPortFree>
 80021d6:	e7d2      	b.n	800217e <prvIdleTask+0x6>
 80021d8:	20002110 	.word	0x20002110
 80021dc:	2000209c 	.word	0x2000209c
 80021e0:	2000200c 	.word	0x2000200c
 80021e4:	e000ed04 	.word	0xe000ed04
 80021e8:	20002098 	.word	0x20002098

080021ec <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80021ec:	4b17      	ldr	r3, [pc, #92]	; (800224c <vTaskSwitchContext+0x60>)
{
 80021ee:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	4b17      	ldr	r3, [pc, #92]	; (8002250 <vTaskSwitchContext+0x64>)
 80021f4:	b112      	cbz	r2, 80021fc <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80021f6:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80021fc:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80021fe:	4b15      	ldr	r3, [pc, #84]	; (8002254 <vTaskSwitchContext+0x68>)
 8002200:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	2214      	movs	r2, #20
 8002208:	b2db      	uxtb	r3, r3
 800220a:	f1c3 031f 	rsb	r3, r3, #31
 800220e:	435a      	muls	r2, r3
 8002210:	4911      	ldr	r1, [pc, #68]	; (8002258 <vTaskSwitchContext+0x6c>)
 8002212:	588c      	ldr	r4, [r1, r2]
 8002214:	1888      	adds	r0, r1, r2
 8002216:	b944      	cbnz	r4, 800222a <vTaskSwitchContext+0x3e>
	__asm volatile
 8002218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800221c:	f383 8811 	msr	BASEPRI, r3
 8002220:	f3bf 8f6f 	isb	sy
 8002224:	f3bf 8f4f 	dsb	sy
 8002228:	e7fe      	b.n	8002228 <vTaskSwitchContext+0x3c>
 800222a:	6844      	ldr	r4, [r0, #4]
 800222c:	3208      	adds	r2, #8
 800222e:	6864      	ldr	r4, [r4, #4]
 8002230:	440a      	add	r2, r1
 8002232:	4294      	cmp	r4, r2
 8002234:	bf08      	it	eq
 8002236:	6862      	ldreq	r2, [r4, #4]
 8002238:	6044      	str	r4, [r0, #4]
 800223a:	bf08      	it	eq
 800223c:	6042      	streq	r2, [r0, #4]
 800223e:	2214      	movs	r2, #20
 8002240:	fb02 1303 	mla	r3, r2, r3, r1
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	4b04      	ldr	r3, [pc, #16]	; (800225c <vTaskSwitchContext+0x70>)
 800224a:	e7d5      	b.n	80021f8 <vTaskSwitchContext+0xc>
 800224c:	200020a4 	.word	0x200020a4
 8002250:	20002128 	.word	0x20002128
 8002254:	200020ac 	.word	0x200020ac
 8002258:	2000200c 	.word	0x2000200c
 800225c:	20002000 	.word	0x20002000

08002260 <vTaskPlaceOnEventList>:
{
 8002260:	b510      	push	{r4, lr}
 8002262:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8002264:	b940      	cbnz	r0, 8002278 <vTaskPlaceOnEventList+0x18>
 8002266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800226a:	f383 8811 	msr	BASEPRI, r3
 800226e:	f3bf 8f6f 	isb	sy
 8002272:	f3bf 8f4f 	dsb	sy
 8002276:	e7fe      	b.n	8002276 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <vTaskPlaceOnEventList+0x30>)
 800227a:	6819      	ldr	r1, [r3, #0]
 800227c:	3118      	adds	r1, #24
 800227e:	f7fe ffa5 	bl	80011cc <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002282:	4620      	mov	r0, r4
}
 8002284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002288:	2101      	movs	r1, #1
 800228a:	f7ff bcfd 	b.w	8001c88 <prvAddCurrentTaskToDelayedList>
 800228e:	bf00      	nop
 8002290:	20002000 	.word	0x20002000

08002294 <vTaskPlaceOnEventListRestricted>:
	{
 8002294:	b538      	push	{r3, r4, r5, lr}
 8002296:	460d      	mov	r5, r1
 8002298:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800229a:	b940      	cbnz	r0, 80022ae <vTaskPlaceOnEventListRestricted+0x1a>
 800229c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a0:	f383 8811 	msr	BASEPRI, r3
 80022a4:	f3bf 8f6f 	isb	sy
 80022a8:	f3bf 8f4f 	dsb	sy
 80022ac:	e7fe      	b.n	80022ac <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80022ae:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <vTaskPlaceOnEventListRestricted+0x3c>)
 80022b0:	6819      	ldr	r1, [r3, #0]
 80022b2:	3118      	adds	r1, #24
 80022b4:	f7fe ff7e 	bl	80011b4 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80022b8:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80022ba:	4621      	mov	r1, r4
 80022bc:	bf08      	it	eq
 80022be:	4628      	moveq	r0, r5
	}
 80022c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80022c4:	bf18      	it	ne
 80022c6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80022ca:	f7ff bcdd 	b.w	8001c88 <prvAddCurrentTaskToDelayedList>
 80022ce:	bf00      	nop
 80022d0:	20002000 	.word	0x20002000

080022d4 <xTaskRemoveFromEventList>:
{
 80022d4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80022d6:	68c3      	ldr	r3, [r0, #12]
 80022d8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80022da:	b944      	cbnz	r4, 80022ee <xTaskRemoveFromEventList+0x1a>
 80022dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e0:	f383 8811 	msr	BASEPRI, r3
 80022e4:	f3bf 8f6f 	isb	sy
 80022e8:	f3bf 8f4f 	dsb	sy
 80022ec:	e7fe      	b.n	80022ec <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80022ee:	f104 0518 	add.w	r5, r4, #24
 80022f2:	4628      	mov	r0, r5
 80022f4:	f7fe ff81 	bl	80011fa <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022f8:	4b11      	ldr	r3, [pc, #68]	; (8002340 <xTaskRemoveFromEventList+0x6c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	b9e3      	cbnz	r3, 8002338 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80022fe:	1d25      	adds	r5, r4, #4
 8002300:	4628      	mov	r0, r5
 8002302:	f7fe ff7a 	bl	80011fa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002306:	2301      	movs	r3, #1
 8002308:	490e      	ldr	r1, [pc, #56]	; (8002344 <xTaskRemoveFromEventList+0x70>)
 800230a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800230c:	6808      	ldr	r0, [r1, #0]
 800230e:	4093      	lsls	r3, r2
 8002310:	4303      	orrs	r3, r0
 8002312:	2014      	movs	r0, #20
 8002314:	600b      	str	r3, [r1, #0]
 8002316:	4629      	mov	r1, r5
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <xTaskRemoveFromEventList+0x74>)
 800231a:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800231e:	f7fe ff49 	bl	80011b4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002322:	4b0a      	ldr	r3, [pc, #40]	; (800234c <xTaskRemoveFromEventList+0x78>)
 8002324:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232a:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800232c:	bf85      	ittet	hi
 800232e:	2001      	movhi	r0, #1
 8002330:	4b07      	ldrhi	r3, [pc, #28]	; (8002350 <xTaskRemoveFromEventList+0x7c>)
		xReturn = pdFALSE;
 8002332:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8002334:	6018      	strhi	r0, [r3, #0]
}
 8002336:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002338:	4629      	mov	r1, r5
 800233a:	4806      	ldr	r0, [pc, #24]	; (8002354 <xTaskRemoveFromEventList+0x80>)
 800233c:	e7ef      	b.n	800231e <xTaskRemoveFromEventList+0x4a>
 800233e:	bf00      	nop
 8002340:	200020a4 	.word	0x200020a4
 8002344:	200020ac 	.word	0x200020ac
 8002348:	2000200c 	.word	0x2000200c
 800234c:	20002000 	.word	0x20002000
 8002350:	20002128 	.word	0x20002128
 8002354:	200020e4 	.word	0x200020e4

08002358 <vTaskSetTimeOutState>:
{
 8002358:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 800235a:	b908      	cbnz	r0, 8002360 <vTaskSetTimeOutState+0x8>
 800235c:	f7ff fcda 	bl	8001d14 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002360:	4b03      	ldr	r3, [pc, #12]	; (8002370 <vTaskSetTimeOutState+0x18>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002366:	4b03      	ldr	r3, [pc, #12]	; (8002374 <vTaskSetTimeOutState+0x1c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6043      	str	r3, [r0, #4]
 800236c:	bd08      	pop	{r3, pc}
 800236e:	bf00      	nop
 8002370:	200020e0 	.word	0x200020e0
 8002374:	20002124 	.word	0x20002124

08002378 <xTaskCheckForTimeOut>:
{
 8002378:	b538      	push	{r3, r4, r5, lr}
 800237a:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 800237c:	4604      	mov	r4, r0
 800237e:	b940      	cbnz	r0, 8002392 <xTaskCheckForTimeOut+0x1a>
 8002380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002384:	f383 8811 	msr	BASEPRI, r3
 8002388:	f3bf 8f6f 	isb	sy
 800238c:	f3bf 8f4f 	dsb	sy
 8002390:	e7fe      	b.n	8002390 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8002392:	b941      	cbnz	r1, 80023a6 <xTaskCheckForTimeOut+0x2e>
 8002394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002398:	f383 8811 	msr	BASEPRI, r3
 800239c:	f3bf 8f6f 	isb	sy
 80023a0:	f3bf 8f4f 	dsb	sy
 80023a4:	e7fe      	b.n	80023a4 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80023a6:	f7fe ff85 	bl	80012b4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80023aa:	4b0e      	ldr	r3, [pc, #56]	; (80023e4 <xTaskCheckForTimeOut+0x6c>)
 80023ac:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80023ae:	682b      	ldr	r3, [r5, #0]
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	d010      	beq.n	80023d6 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80023b4:	4a0c      	ldr	r2, [pc, #48]	; (80023e8 <xTaskCheckForTimeOut+0x70>)
 80023b6:	6820      	ldr	r0, [r4, #0]
 80023b8:	6812      	ldr	r2, [r2, #0]
 80023ba:	4290      	cmp	r0, r2
 80023bc:	6862      	ldr	r2, [r4, #4]
 80023be:	d001      	beq.n	80023c4 <xTaskCheckForTimeOut+0x4c>
 80023c0:	4291      	cmp	r1, r2
 80023c2:	d20d      	bcs.n	80023e0 <xTaskCheckForTimeOut+0x68>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80023c4:	1a88      	subs	r0, r1, r2
 80023c6:	4283      	cmp	r3, r0
 80023c8:	d90a      	bls.n	80023e0 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80023ca:	1a5b      	subs	r3, r3, r1
 80023cc:	4413      	add	r3, r2
 80023ce:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80023d0:	4620      	mov	r0, r4
 80023d2:	f7ff ffc1 	bl	8002358 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 80023d6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80023d8:	f7fe ff8e 	bl	80012f8 <vPortExitCritical>
}
 80023dc:	4620      	mov	r0, r4
 80023de:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 80023e0:	2401      	movs	r4, #1
 80023e2:	e7f9      	b.n	80023d8 <xTaskCheckForTimeOut+0x60>
 80023e4:	20002124 	.word	0x20002124
 80023e8:	200020e0 	.word	0x200020e0

080023ec <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80023ec:	2201      	movs	r2, #1
 80023ee:	4b01      	ldr	r3, [pc, #4]	; (80023f4 <vTaskMissedYield+0x8>)
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	4770      	bx	lr
 80023f4:	20002128 	.word	0x20002128

080023f8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <xTaskGetSchedulerState+0x18>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	b133      	cbz	r3, 800240c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80023fe:	4b05      	ldr	r3, [pc, #20]	; (8002414 <xTaskGetSchedulerState+0x1c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8002404:	bf0c      	ite	eq
 8002406:	2002      	moveq	r0, #2
 8002408:	2000      	movne	r0, #0
 800240a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800240c:	2001      	movs	r0, #1
	}
 800240e:	4770      	bx	lr
 8002410:	200020f8 	.word	0x200020f8
 8002414:	200020a4 	.word	0x200020a4

08002418 <vTaskPriorityInherit>:
	{
 8002418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 800241c:	4604      	mov	r4, r0
 800241e:	2800      	cmp	r0, #0
 8002420:	d039      	beq.n	8002496 <vTaskPriorityInherit+0x7e>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002422:	4d1e      	ldr	r5, [pc, #120]	; (800249c <vTaskPriorityInherit+0x84>)
 8002424:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002426:	682a      	ldr	r2, [r5, #0]
 8002428:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800242a:	4293      	cmp	r3, r2
 800242c:	d233      	bcs.n	8002496 <vTaskPriorityInherit+0x7e>
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800242e:	2714      	movs	r7, #20
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002430:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002432:	4e1b      	ldr	r6, [pc, #108]	; (80024a0 <vTaskPriorityInherit+0x88>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002434:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002436:	bfa8      	it	ge
 8002438:	682a      	ldrge	r2, [r5, #0]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800243a:	fb07 6303 	mla	r3, r7, r3, r6
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800243e:	bfa2      	ittt	ge
 8002440:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8002442:	f1c2 0207 	rsbge	r2, r2, #7
 8002446:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002448:	6942      	ldr	r2, [r0, #20]
 800244a:	429a      	cmp	r2, r3
 800244c:	d120      	bne.n	8002490 <vTaskPriorityInherit+0x78>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800244e:	f100 0804 	add.w	r8, r0, #4
 8002452:	4640      	mov	r0, r8
 8002454:	f7fe fed1 	bl	80011fa <uxListRemove>
 8002458:	4a12      	ldr	r2, [pc, #72]	; (80024a4 <vTaskPriorityInherit+0x8c>)
 800245a:	b948      	cbnz	r0, 8002470 <vTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800245c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800245e:	4347      	muls	r7, r0
 8002460:	59f3      	ldr	r3, [r6, r7]
 8002462:	b92b      	cbnz	r3, 8002470 <vTaskPriorityInherit+0x58>
 8002464:	2101      	movs	r1, #1
 8002466:	6813      	ldr	r3, [r2, #0]
 8002468:	4081      	lsls	r1, r0
 800246a:	ea23 0301 	bic.w	r3, r3, r1
 800246e:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002470:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8002472:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002474:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002476:	2301      	movs	r3, #1
 8002478:	4083      	lsls	r3, r0
 800247a:	430b      	orrs	r3, r1
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	2314      	movs	r3, #20
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002480:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002482:	4641      	mov	r1, r8
 8002484:	fb03 6000 	mla	r0, r3, r0, r6
	}
 8002488:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 800248c:	f7fe be92 	b.w	80011b4 <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002490:	682b      	ldr	r3, [r5, #0]
 8002492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002494:	62c3      	str	r3, [r0, #44]	; 0x2c
 8002496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800249a:	bf00      	nop
 800249c:	20002000 	.word	0x20002000
 80024a0:	2000200c 	.word	0x2000200c
 80024a4:	200020ac 	.word	0x200020ac

080024a8 <xTaskPriorityDisinherit>:
	{
 80024a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80024aa:	4604      	mov	r4, r0
 80024ac:	b908      	cbnz	r0, 80024b2 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80024ae:	2000      	movs	r0, #0
 80024b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80024b2:	4b22      	ldr	r3, [pc, #136]	; (800253c <xTaskPriorityDisinherit+0x94>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4298      	cmp	r0, r3
 80024b8:	d008      	beq.n	80024cc <xTaskPriorityDisinherit+0x24>
 80024ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024be:	f383 8811 	msr	BASEPRI, r3
 80024c2:	f3bf 8f6f 	isb	sy
 80024c6:	f3bf 8f4f 	dsb	sy
 80024ca:	e7fe      	b.n	80024ca <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80024cc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80024ce:	b943      	cbnz	r3, 80024e2 <xTaskPriorityDisinherit+0x3a>
 80024d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d4:	f383 8811 	msr	BASEPRI, r3
 80024d8:	f3bf 8f6f 	isb	sy
 80024dc:	f3bf 8f4f 	dsb	sy
 80024e0:	e7fe      	b.n	80024e0 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80024e2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80024e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 80024e6:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80024e8:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 80024ea:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80024ec:	d0df      	beq.n	80024ae <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1dd      	bne.n	80024ae <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80024f2:	1d05      	adds	r5, r0, #4
 80024f4:	4628      	mov	r0, r5
 80024f6:	f7fe fe80 	bl	80011fa <uxListRemove>
 80024fa:	4e11      	ldr	r6, [pc, #68]	; (8002540 <xTaskPriorityDisinherit+0x98>)
 80024fc:	4a11      	ldr	r2, [pc, #68]	; (8002544 <xTaskPriorityDisinherit+0x9c>)
 80024fe:	b950      	cbnz	r0, 8002516 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002500:	2114      	movs	r1, #20
 8002502:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002504:	4379      	muls	r1, r7
 8002506:	5873      	ldr	r3, [r6, r1]
 8002508:	b92b      	cbnz	r3, 8002516 <xTaskPriorityDisinherit+0x6e>
 800250a:	2001      	movs	r0, #1
 800250c:	6813      	ldr	r3, [r2, #0]
 800250e:	40b8      	lsls	r0, r7
 8002510:	ea23 0300 	bic.w	r3, r3, r0
 8002514:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002516:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002518:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800251c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800251e:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8002520:	2401      	movs	r4, #1
 8002522:	6811      	ldr	r1, [r2, #0]
 8002524:	fa04 f003 	lsl.w	r0, r4, r3
 8002528:	4308      	orrs	r0, r1
 800252a:	6010      	str	r0, [r2, #0]
 800252c:	2014      	movs	r0, #20
 800252e:	4629      	mov	r1, r5
 8002530:	fb00 6003 	mla	r0, r0, r3, r6
 8002534:	f7fe fe3e 	bl	80011b4 <vListInsertEnd>
					xReturn = pdTRUE;
 8002538:	4620      	mov	r0, r4
	}
 800253a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800253c:	20002000 	.word	0x20002000
 8002540:	2000200c 	.word	0x2000200c
 8002544:	200020ac 	.word	0x200020ac

08002548 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8002548:	4b04      	ldr	r3, [pc, #16]	; (800255c <pvTaskIncrementMutexHeldCount+0x14>)
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	b11a      	cbz	r2, 8002556 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800254e:	6819      	ldr	r1, [r3, #0]
 8002550:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8002552:	3201      	adds	r2, #1
 8002554:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8002556:	6818      	ldr	r0, [r3, #0]
	}
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	20002000 	.word	0x20002000

08002560 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8002562:	4c0f      	ldr	r4, [pc, #60]	; (80025a0 <prvCheckForValidListAndQueue+0x40>)
	taskENTER_CRITICAL();
 8002564:	f7fe fea6 	bl	80012b4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8002568:	6825      	ldr	r5, [r4, #0]
 800256a:	b9ad      	cbnz	r5, 8002598 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 800256c:	4f0d      	ldr	r7, [pc, #52]	; (80025a4 <prvCheckForValidListAndQueue+0x44>)
			vListInitialise( &xActiveTimerList2 );
 800256e:	4e0e      	ldr	r6, [pc, #56]	; (80025a8 <prvCheckForValidListAndQueue+0x48>)
			vListInitialise( &xActiveTimerList1 );
 8002570:	4638      	mov	r0, r7
 8002572:	f7fe fe11 	bl	8001198 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002576:	4630      	mov	r0, r6
 8002578:	f7fe fe0e 	bl	8001198 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800257c:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <prvCheckForValidListAndQueue+0x4c>)

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800257e:	462a      	mov	r2, r5
			pxCurrentTimerList = &xActiveTimerList1;
 8002580:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002582:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <prvCheckForValidListAndQueue+0x50>)
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002584:	210c      	movs	r1, #12
 8002586:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8002588:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800258a:	f7ff f937 	bl	80017fc <xQueueGenericCreate>
 800258e:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002590:	b110      	cbz	r0, 8002598 <prvCheckForValidListAndQueue+0x38>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002592:	4908      	ldr	r1, [pc, #32]	; (80025b4 <prvCheckForValidListAndQueue+0x54>)
 8002594:	f7ff fb30 	bl	8001bf8 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8002598:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800259c:	f7fe beac 	b.w	80012f8 <vPortExitCritical>
 80025a0:	20002160 	.word	0x20002160
 80025a4:	20002134 	.word	0x20002134
 80025a8:	20002148 	.word	0x20002148
 80025ac:	2000212c 	.word	0x2000212c
 80025b0:	20002130 	.word	0x20002130
 80025b4:	08002dd1 	.word	0x08002dd1

080025b8 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 80025b8:	4291      	cmp	r1, r2
{
 80025ba:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80025bc:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80025be:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 80025c0:	d80a      	bhi.n	80025d8 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025c2:	1ad2      	subs	r2, r2, r3
 80025c4:	6983      	ldr	r3, [r0, #24]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d20d      	bcs.n	80025e6 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80025ca:	4b08      	ldr	r3, [pc, #32]	; (80025ec <prvInsertTimerInActiveList+0x34>)
 80025cc:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	f7fe fdfc 	bl	80011cc <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80025d4:	2000      	movs	r0, #0
 80025d6:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80025d8:	429a      	cmp	r2, r3
 80025da:	d201      	bcs.n	80025e0 <prvInsertTimerInActiveList+0x28>
 80025dc:	4299      	cmp	r1, r3
 80025de:	d202      	bcs.n	80025e6 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80025e0:	1d01      	adds	r1, r0, #4
 80025e2:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <prvInsertTimerInActiveList+0x38>)
 80025e4:	e7f3      	b.n	80025ce <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 80025e6:	2001      	movs	r0, #1
}
 80025e8:	bd08      	pop	{r3, pc}
 80025ea:	bf00      	nop
 80025ec:	20002130 	.word	0x20002130
 80025f0:	2000212c 	.word	0x2000212c

080025f4 <xTimerCreateTimerTask>:
{
 80025f4:	b507      	push	{r0, r1, r2, lr}
	prvCheckForValidListAndQueue();
 80025f6:	f7ff ffb3 	bl	8002560 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80025fa:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <xTimerCreateTimerTask+0x3c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	b15b      	cbz	r3, 8002618 <xTimerCreateTimerTask+0x24>
			xReturn = xTaskCreate(	prvTimerTask,
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <xTimerCreateTimerTask+0x40>)
 8002602:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002606:	9301      	str	r3, [sp, #4]
 8002608:	2303      	movs	r3, #3
 800260a:	490b      	ldr	r1, [pc, #44]	; (8002638 <xTimerCreateTimerTask+0x44>)
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	480b      	ldr	r0, [pc, #44]	; (800263c <xTimerCreateTimerTask+0x48>)
 8002610:	2300      	movs	r3, #0
 8002612:	f7ff fb89 	bl	8001d28 <xTaskCreate>
	configASSERT( xReturn );
 8002616:	b940      	cbnz	r0, 800262a <xTimerCreateTimerTask+0x36>
 8002618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261c:	f383 8811 	msr	BASEPRI, r3
 8002620:	f3bf 8f6f 	isb	sy
 8002624:	f3bf 8f4f 	dsb	sy
 8002628:	e7fe      	b.n	8002628 <xTimerCreateTimerTask+0x34>
}
 800262a:	b003      	add	sp, #12
 800262c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002630:	20002160 	.word	0x20002160
 8002634:	20002164 	.word	0x20002164
 8002638:	08002dd6 	.word	0x08002dd6
 800263c:	0800275d 	.word	0x0800275d

08002640 <xTimerCreate>:
	{
 8002640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002644:	4680      	mov	r8, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8002646:	2028      	movs	r0, #40	; 0x28
	{
 8002648:	460d      	mov	r5, r1
 800264a:	4617      	mov	r7, r2
 800264c:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800264e:	f7fe ff4f 	bl	80014f0 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8002652:	4604      	mov	r4, r0
 8002654:	b1a8      	cbz	r0, 8002682 <xTimerCreate+0x42>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8002656:	b945      	cbnz	r5, 800266a <xTimerCreate+0x2a>
 8002658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265c:	f383 8811 	msr	BASEPRI, r3
 8002660:	f3bf 8f6f 	isb	sy
 8002664:	f3bf 8f4f 	dsb	sy
 8002668:	e7fe      	b.n	8002668 <xTimerCreate+0x28>
		prvCheckForValidListAndQueue();
 800266a:	f7ff ff79 	bl	8002560 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800266e:	9b06      	ldr	r3, [sp, #24]
		pxNewTimer->pcTimerName = pcTimerName;
 8002670:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8002674:	61a5      	str	r5, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8002676:	61e7      	str	r7, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8002678:	6226      	str	r6, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800267a:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800267c:	1d20      	adds	r0, r4, #4
 800267e:	f7fe fd96 	bl	80011ae <vListInitialiseItem>
	}
 8002682:	4620      	mov	r0, r4
 8002684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002688 <xTimerGenericCommand>:
{
 8002688:	b530      	push	{r4, r5, lr}
 800268a:	4615      	mov	r5, r2
 800268c:	b085      	sub	sp, #20
 800268e:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8002690:	4603      	mov	r3, r0
 8002692:	b940      	cbnz	r0, 80026a6 <xTimerGenericCommand+0x1e>
 8002694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002698:	f383 8811 	msr	BASEPRI, r3
 800269c:	f3bf 8f6f 	isb	sy
 80026a0:	f3bf 8f4f 	dsb	sy
 80026a4:	e7fe      	b.n	80026a4 <xTimerGenericCommand+0x1c>
	if( xTimerQueue != NULL )
 80026a6:	4c0d      	ldr	r4, [pc, #52]	; (80026dc <xTimerGenericCommand+0x54>)
 80026a8:	6820      	ldr	r0, [r4, #0]
 80026aa:	b178      	cbz	r0, 80026cc <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80026ac:	2905      	cmp	r1, #5
		xMessage.xMessageID = xCommandID;
 80026ae:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80026b0:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80026b2:	9303      	str	r3, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80026b4:	dc0c      	bgt.n	80026d0 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80026b6:	f7ff fe9f 	bl	80023f8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80026ba:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80026bc:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80026be:	bf0c      	ite	eq
 80026c0:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80026c2:	461a      	movne	r2, r3
 80026c4:	a901      	add	r1, sp, #4
 80026c6:	6820      	ldr	r0, [r4, #0]
 80026c8:	f7ff f8ba 	bl	8001840 <xQueueGenericSend>
}
 80026cc:	b005      	add	sp, #20
 80026ce:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80026d0:	2300      	movs	r3, #0
 80026d2:	a901      	add	r1, sp, #4
 80026d4:	f7ff f96a 	bl	80019ac <xQueueGenericSendFromISR>
 80026d8:	e7f8      	b.n	80026cc <xTimerGenericCommand+0x44>
 80026da:	bf00      	nop
 80026dc:	20002160 	.word	0x20002160

080026e0 <prvSwitchTimerLists>:
{
 80026e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80026e4:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80026e8:	4d1a      	ldr	r5, [pc, #104]	; (8002754 <prvSwitchTimerLists+0x74>)
 80026ea:	682b      	ldr	r3, [r5, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	b932      	cbnz	r2, 80026fe <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 80026f0:	4a19      	ldr	r2, [pc, #100]	; (8002758 <prvSwitchTimerLists+0x78>)
 80026f2:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80026f4:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 80026f6:	6029      	str	r1, [r5, #0]
}
 80026f8:	b002      	add	sp, #8
 80026fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80026fe:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002700:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002702:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002704:	1d27      	adds	r7, r4, #4
 8002706:	4638      	mov	r0, r7
 8002708:	f7fe fd77 	bl	80011fa <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800270c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800270e:	4620      	mov	r0, r4
 8002710:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002712:	69e3      	ldr	r3, [r4, #28]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d1e8      	bne.n	80026ea <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002718:	69a3      	ldr	r3, [r4, #24]
 800271a:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800271c:	429e      	cmp	r6, r3
 800271e:	d206      	bcs.n	800272e <prvSwitchTimerLists+0x4e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002720:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002722:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002724:	4639      	mov	r1, r7
 8002726:	6828      	ldr	r0, [r5, #0]
 8002728:	f7fe fd50 	bl	80011cc <vListInsert>
 800272c:	e7dd      	b.n	80026ea <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800272e:	2300      	movs	r3, #0
 8002730:	f8cd 8000 	str.w	r8, [sp]
 8002734:	4632      	mov	r2, r6
 8002736:	4619      	mov	r1, r3
 8002738:	4620      	mov	r0, r4
 800273a:	f7ff ffa5 	bl	8002688 <xTimerGenericCommand>
				configASSERT( xResult );
 800273e:	2800      	cmp	r0, #0
 8002740:	d1d3      	bne.n	80026ea <prvSwitchTimerLists+0xa>
 8002742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002746:	f383 8811 	msr	BASEPRI, r3
 800274a:	f3bf 8f6f 	isb	sy
 800274e:	f3bf 8f4f 	dsb	sy
 8002752:	e7fe      	b.n	8002752 <prvSwitchTimerLists+0x72>
 8002754:	2000212c 	.word	0x2000212c
 8002758:	20002130 	.word	0x20002130

0800275c <prvTimerTask>:
{
 800275c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002760:	4d6c      	ldr	r5, [pc, #432]	; (8002914 <prvTimerTask+0x1b8>)
					portYIELD_WITHIN_API();
 8002762:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002924 <prvTimerTask+0x1c8>
 8002766:	462f      	mov	r7, r5
{
 8002768:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800276a:	682b      	ldr	r3, [r5, #0]
 800276c:	f8d3 b000 	ldr.w	fp, [r3]
	if( *pxListWasEmpty == pdFALSE )
 8002770:	f1bb 0f00 	cmp.w	fp, #0
 8002774:	d042      	beq.n	80027fc <prvTimerTask+0xa0>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f8d3 9000 	ldr.w	r9, [r3]
	vTaskSuspendAll();
 800277c:	f7ff fbe4 	bl	8001f48 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8002780:	f7ff fbea 	bl	8001f58 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8002784:	4b64      	ldr	r3, [pc, #400]	; (8002918 <prvTimerTask+0x1bc>)
	xTimeNow = xTaskGetTickCount();
 8002786:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	461e      	mov	r6, r3
 800278c:	4290      	cmp	r0, r2
 800278e:	d237      	bcs.n	8002800 <prvTimerTask+0xa4>
		*pxTimerListsWereSwitched = pdTRUE;
 8002790:	2401      	movs	r4, #1
 8002792:	9303      	str	r3, [sp, #12]
		prvSwitchTimerLists();
 8002794:	f7ff ffa4 	bl	80026e0 <prvSwitchTimerLists>
 8002798:	9b03      	ldr	r3, [sp, #12]
	xLastTime = xTimeNow;
 800279a:	f8c3 a000 	str.w	sl, [r3]
		if( xTimerListsWereSwitched == pdFALSE )
 800279e:	2c00      	cmp	r4, #0
 80027a0:	d17e      	bne.n	80028a0 <prvTimerTask+0x144>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80027a2:	f1bb 0f00 	cmp.w	fp, #0
 80027a6:	d060      	beq.n	800286a <prvTimerTask+0x10e>
 80027a8:	45d1      	cmp	r9, sl
 80027aa:	d877      	bhi.n	800289c <prvTimerTask+0x140>
				( void ) xTaskResumeAll();
 80027ac:	f7ff fc6c 	bl	8002088 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80027b8:	f10b 0004 	add.w	r0, fp, #4
 80027bc:	f7fe fd1d 	bl	80011fa <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80027c0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d11d      	bne.n	8002804 <prvTimerTask+0xa8>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80027c8:	f8db 1018 	ldr.w	r1, [fp, #24]
 80027cc:	464b      	mov	r3, r9
 80027ce:	4652      	mov	r2, sl
 80027d0:	4449      	add	r1, r9
 80027d2:	4658      	mov	r0, fp
 80027d4:	f7ff fef0 	bl	80025b8 <prvInsertTimerInActiveList>
 80027d8:	b1a0      	cbz	r0, 8002804 <prvTimerTask+0xa8>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80027da:	9400      	str	r4, [sp, #0]
 80027dc:	4623      	mov	r3, r4
 80027de:	464a      	mov	r2, r9
 80027e0:	4621      	mov	r1, r4
 80027e2:	4658      	mov	r0, fp
 80027e4:	f7ff ff50 	bl	8002688 <xTimerGenericCommand>
			configASSERT( xResult );
 80027e8:	b960      	cbnz	r0, 8002804 <prvTimerTask+0xa8>
 80027ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ee:	f383 8811 	msr	BASEPRI, r3
 80027f2:	f3bf 8f6f 	isb	sy
 80027f6:	f3bf 8f4f 	dsb	sy
 80027fa:	e7fe      	b.n	80027fa <prvTimerTask+0x9e>
		xNextExpireTime = ( TickType_t ) 0U;
 80027fc:	46d9      	mov	r9, fp
 80027fe:	e7bd      	b.n	800277c <prvTimerTask+0x20>
		*pxTimerListsWereSwitched = pdFALSE;
 8002800:	2400      	movs	r4, #0
 8002802:	e7ca      	b.n	800279a <prvTimerTask+0x3e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002804:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 8002808:	4658      	mov	r0, fp
 800280a:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800280c:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8002920 <prvTimerTask+0x1c4>
 8002810:	2300      	movs	r3, #0
 8002812:	a905      	add	r1, sp, #20
 8002814:	461a      	mov	r2, r3
 8002816:	f8d9 0000 	ldr.w	r0, [r9]
 800281a:	f7ff f929 	bl	8001a70 <xQueueGenericReceive>
 800281e:	2800      	cmp	r0, #0
 8002820:	d0a3      	beq.n	800276a <prvTimerTask+0xe>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002822:	9b05      	ldr	r3, [sp, #20]
 8002824:	2b00      	cmp	r3, #0
 8002826:	dbf3      	blt.n	8002810 <prvTimerTask+0xb4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002828:	9c07      	ldr	r4, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800282a:	6963      	ldr	r3, [r4, #20]
 800282c:	b113      	cbz	r3, 8002834 <prvTimerTask+0xd8>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800282e:	1d20      	adds	r0, r4, #4
 8002830:	f7fe fce3 	bl	80011fa <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8002834:	f7ff fb90 	bl	8001f58 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8002838:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 800283a:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 800283c:	4298      	cmp	r0, r3
 800283e:	d201      	bcs.n	8002844 <prvTimerTask+0xe8>
		prvSwitchTimerLists();
 8002840:	f7ff ff4e 	bl	80026e0 <prvSwitchTimerLists>
 8002844:	9a05      	ldr	r2, [sp, #20]
	xLastTime = xTimeNow;
 8002846:	f8c6 b000 	str.w	fp, [r6]
 800284a:	2a09      	cmp	r2, #9
 800284c:	d8e0      	bhi.n	8002810 <prvTimerTask+0xb4>
 800284e:	2301      	movs	r3, #1
 8002850:	4093      	lsls	r3, r2
 8002852:	f413 7a04 	ands.w	sl, r3, #528	; 0x210
 8002856:	d14a      	bne.n	80028ee <prvTimerTask+0x192>
 8002858:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 800285c:	d123      	bne.n	80028a6 <prvTimerTask+0x14a>
 800285e:	069b      	lsls	r3, r3, #26
 8002860:	d5d6      	bpl.n	8002810 <prvTimerTask+0xb4>
						vPortFree( pxTimer );
 8002862:	4620      	mov	r0, r4
 8002864:	f7fe fed2 	bl	800160c <vPortFree>
 8002868:	e7d2      	b.n	8002810 <prvTimerTask+0xb4>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800286a:	4b2c      	ldr	r3, [pc, #176]	; (800291c <prvTimerTask+0x1c0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	fab2 f282 	clz	r2, r2
 8002874:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002876:	4b2a      	ldr	r3, [pc, #168]	; (8002920 <prvTimerTask+0x1c4>)
 8002878:	eba9 010a 	sub.w	r1, r9, sl
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	f7ff f9cd 	bl	8001c1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002882:	f7ff fc01 	bl	8002088 <xTaskResumeAll>
 8002886:	2800      	cmp	r0, #0
 8002888:	d1c0      	bne.n	800280c <prvTimerTask+0xb0>
					portYIELD_WITHIN_API();
 800288a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800288e:	f8c8 3000 	str.w	r3, [r8]
 8002892:	f3bf 8f4f 	dsb	sy
 8002896:	f3bf 8f6f 	isb	sy
 800289a:	e7b7      	b.n	800280c <prvTimerTask+0xb0>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800289c:	4622      	mov	r2, r4
 800289e:	e7ea      	b.n	8002876 <prvTimerTask+0x11a>
			( void ) xTaskResumeAll();
 80028a0:	f7ff fbf2 	bl	8002088 <xTaskResumeAll>
 80028a4:	e7b2      	b.n	800280c <prvTimerTask+0xb0>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80028a6:	69a1      	ldr	r1, [r4, #24]
 80028a8:	9b06      	ldr	r3, [sp, #24]
 80028aa:	465a      	mov	r2, fp
 80028ac:	4419      	add	r1, r3
 80028ae:	4620      	mov	r0, r4
 80028b0:	f7ff fe82 	bl	80025b8 <prvInsertTimerInActiveList>
 80028b4:	2800      	cmp	r0, #0
 80028b6:	d0ab      	beq.n	8002810 <prvTimerTask+0xb4>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80028b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028ba:	4620      	mov	r0, r4
 80028bc:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80028be:	69e3      	ldr	r3, [r4, #28]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d1a5      	bne.n	8002810 <prvTimerTask+0xb4>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80028c4:	69a2      	ldr	r2, [r4, #24]
 80028c6:	9906      	ldr	r1, [sp, #24]
 80028c8:	f8cd a000 	str.w	sl, [sp]
 80028cc:	440a      	add	r2, r1
 80028ce:	4653      	mov	r3, sl
 80028d0:	4651      	mov	r1, sl
 80028d2:	4620      	mov	r0, r4
 80028d4:	f7ff fed8 	bl	8002688 <xTimerGenericCommand>
							configASSERT( xResult );
 80028d8:	2800      	cmp	r0, #0
 80028da:	d199      	bne.n	8002810 <prvTimerTask+0xb4>
 80028dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e0:	f383 8811 	msr	BASEPRI, r3
 80028e4:	f3bf 8f6f 	isb	sy
 80028e8:	f3bf 8f4f 	dsb	sy
 80028ec:	e7fe      	b.n	80028ec <prvTimerTask+0x190>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80028ee:	9906      	ldr	r1, [sp, #24]
 80028f0:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80028f2:	b941      	cbnz	r1, 8002906 <prvTimerTask+0x1aa>
 80028f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f8:	f383 8811 	msr	BASEPRI, r3
 80028fc:	f3bf 8f6f 	isb	sy
 8002900:	f3bf 8f4f 	dsb	sy
 8002904:	e7fe      	b.n	8002904 <prvTimerTask+0x1a8>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002906:	465b      	mov	r3, fp
 8002908:	465a      	mov	r2, fp
 800290a:	4459      	add	r1, fp
 800290c:	4620      	mov	r0, r4
 800290e:	f7ff fe53 	bl	80025b8 <prvInsertTimerInActiveList>
 8002912:	e77d      	b.n	8002810 <prvTimerTask+0xb4>
 8002914:	2000212c 	.word	0x2000212c
 8002918:	2000215c 	.word	0x2000215c
 800291c:	20002130 	.word	0x20002130
 8002920:	20002160 	.word	0x20002160
 8002924:	e000ed04 	.word	0xe000ed04

08002928 <Callback01>:

/* Callback01 function */
void Callback01(void const * argument)
{
  /* USER CODE BEGIN Callback01 */
  TimerFlag = 1;
 8002928:	2201      	movs	r2, #1
 800292a:	4b01      	ldr	r3, [pc, #4]	; (8002930 <Callback01+0x8>)
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	4770      	bx	lr
 8002930:	2000001c 	.word	0x2000001c

08002934 <task1EntryFunction>:
{
 8002934:	b508      	push	{r3, lr}
   HAL_UART_Transmit(&huart1, StartMessagge, TXSTARTMESSAGESIZE,10);
 8002936:	4d04      	ldr	r5, [pc, #16]	; (8002948 <task1EntryFunction+0x14>)
 8002938:	4c04      	ldr	r4, [pc, #16]	; (800294c <task1EntryFunction+0x18>)
 800293a:	230a      	movs	r3, #10
 800293c:	2212      	movs	r2, #18
 800293e:	4629      	mov	r1, r5
 8002940:	4620      	mov	r0, r4
 8002942:	f7fe fa6d 	bl	8000e20 <HAL_UART_Transmit>
 8002946:	e7f8      	b.n	800293a <task1EntryFunction+0x6>
 8002948:	20000008 	.word	0x20000008
 800294c:	200021b0 	.word	0x200021b0

08002950 <task2EntryFunction>:
	if (TimerFlag == 1)
 8002950:	4c0d      	ldr	r4, [pc, #52]	; (8002988 <task2EntryFunction+0x38>)
{
 8002952:	b508      	push	{r3, lr}
 8002954:	4626      	mov	r6, r4
		HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8002956:	4d0d      	ldr	r5, [pc, #52]	; (800298c <task2EntryFunction+0x3c>)
	if (TimerFlag == 1)
 8002958:	6823      	ldr	r3, [r4, #0]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d1fd      	bne.n	800295a <task2EntryFunction+0xa>
		TimerFlag = 0;
 800295e:	2300      	movs	r3, #0
		HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8002960:	4628      	mov	r0, r5
 8002962:	f44f 5100 	mov.w	r1, #8192	; 0x2000
		TimerFlag = 0;
 8002966:	6033      	str	r3, [r6, #0]
		HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8002968:	f7fd fd95 	bl	8000496 <HAL_GPIO_TogglePin>
		osTimerStart(myTimer01Handle, 1000);
 800296c:	4b08      	ldr	r3, [pc, #32]	; (8002990 <task2EntryFunction+0x40>)
 800296e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	f7fe fbe6 	bl	8001144 <osTimerStart>
		HAL_UART_Transmit(&huart1, StartMessagge, TXSTARTMESSAGESIZE,10);
 8002978:	230a      	movs	r3, #10
 800297a:	2212      	movs	r2, #18
 800297c:	4905      	ldr	r1, [pc, #20]	; (8002994 <task2EntryFunction+0x44>)
 800297e:	4806      	ldr	r0, [pc, #24]	; (8002998 <task2EntryFunction+0x48>)
 8002980:	f7fe fa4e 	bl	8000e20 <HAL_UART_Transmit>
 8002984:	e7e8      	b.n	8002958 <task2EntryFunction+0x8>
 8002986:	bf00      	nop
 8002988:	2000001c 	.word	0x2000001c
 800298c:	40011000 	.word	0x40011000
 8002990:	200021f0 	.word	0x200021f0
 8002994:	20000008 	.word	0x20000008
 8002998:	200021b0 	.word	0x200021b0

0800299c <SystemClock_Config>:
{
 800299c:	b500      	push	{lr}
 800299e:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029a0:	2228      	movs	r2, #40	; 0x28
 80029a2:	2100      	movs	r1, #0
 80029a4:	a806      	add	r0, sp, #24
 80029a6:	f000 f9e0 	bl	8002d6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029aa:	2214      	movs	r2, #20
 80029ac:	2100      	movs	r1, #0
 80029ae:	a801      	add	r0, sp, #4
 80029b0:	f000 f9db 	bl	8002d6a <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029b4:	2302      	movs	r3, #2
 80029b6:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029b8:	2301      	movs	r3, #1
 80029ba:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029bc:	2310      	movs	r3, #16
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029be:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029c0:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029c2:	f7fd fd6d 	bl	80004a0 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80029c6:	2100      	movs	r1, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029c8:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80029ca:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029cc:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80029ce:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029d0:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029d2:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029d4:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80029d6:	f7fd ff2b 	bl	8000830 <HAL_RCC_ClockConfig>
}
 80029da:	b011      	add	sp, #68	; 0x44
 80029dc:	f85d fb04 	ldr.w	pc, [sp], #4

080029e0 <main>:
{
 80029e0:	b500      	push	{lr}
 80029e2:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 80029e4:	f7fd fbb4 	bl	8000150 <HAL_Init>
  SystemClock_Config();
 80029e8:	f7ff ffd8 	bl	800299c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ec:	2210      	movs	r2, #16
 80029ee:	2100      	movs	r1, #0
 80029f0:	a809      	add	r0, sp, #36	; 0x24
 80029f2:	f000 f9ba 	bl	8002d6a <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029f6:	4b31      	ldr	r3, [pc, #196]	; (8002abc <main+0xdc>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80029f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029fc:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80029fe:	4830      	ldr	r0, [pc, #192]	; (8002ac0 <main+0xe0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a00:	f042 0210 	orr.w	r2, r2, #16
 8002a04:	619a      	str	r2, [r3, #24]
 8002a06:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2500      	movs	r5, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a0a:	f002 0210 	and.w	r2, r2, #16
 8002a0e:	9201      	str	r2, [sp, #4]
 8002a10:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a12:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a14:	2401      	movs	r4, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a16:	f042 0220 	orr.w	r2, r2, #32
 8002a1a:	619a      	str	r2, [r3, #24]
 8002a1c:	699a      	ldr	r2, [r3, #24]
  osThreadDef(Task1, task1EntryFunction, osPriorityNormal, 0, 128);
 8002a1e:	ae04      	add	r6, sp, #16
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a20:	f002 0220 	and.w	r2, r2, #32
 8002a24:	9202      	str	r2, [sp, #8]
 8002a26:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a28:	699a      	ldr	r2, [r3, #24]
 8002a2a:	f042 0204 	orr.w	r2, r2, #4
 8002a2e:	619a      	str	r2, [r3, #24]
 8002a30:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002a32:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	9303      	str	r3, [sp, #12]
 8002a3a:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002a3c:	f7fd fd26 	bl	800048c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002a40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a44:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a46:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a48:	a909      	add	r1, sp, #36	; 0x24
 8002a4a:	481d      	ldr	r0, [pc, #116]	; (8002ac0 <main+0xe0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a4c:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4e:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a50:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a52:	f7fd fc3b 	bl	80002cc <HAL_GPIO_Init>
  huart1.Init.BaudRate = 115200;
 8002a56:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 8002a5a:	481a      	ldr	r0, [pc, #104]	; (8002ac4 <main+0xe4>)
  huart1.Init.BaudRate = 115200;
 8002a5c:	4a1a      	ldr	r2, [pc, #104]	; (8002ac8 <main+0xe8>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a5e:	6085      	str	r5, [r0, #8]
  huart1.Init.BaudRate = 115200;
 8002a60:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a64:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a66:	60c5      	str	r5, [r0, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a68:	6143      	str	r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a6a:	6105      	str	r5, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a6c:	6185      	str	r5, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a6e:	61c5      	str	r5, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a70:	f7fe f9a8 	bl	8000dc4 <HAL_UART_Init>
  osTimerDef(myTimer01, Callback01);
 8002a74:	4b15      	ldr	r3, [pc, #84]	; (8002acc <main+0xec>)
 8002a76:	a80e      	add	r0, sp, #56	; 0x38
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8002a78:	4621      	mov	r1, r4
  osTimerDef(myTimer01, Callback01);
 8002a7a:	f840 3d38 	str.w	r3, [r0, #-56]!
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8002a7e:	462a      	mov	r2, r5
 8002a80:	f7fe fb50 	bl	8001124 <osTimerCreate>
  osThreadDef(Task1, task1EntryFunction, osPriorityNormal, 0, 128);
 8002a84:	4c12      	ldr	r4, [pc, #72]	; (8002ad0 <main+0xf0>)
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8002a86:	4b13      	ldr	r3, [pc, #76]	; (8002ad4 <main+0xf4>)
 8002a88:	6018      	str	r0, [r3, #0]
  osThreadDef(Task1, task1EntryFunction, osPriorityNormal, 0, 128);
 8002a8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a8c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002a8e:	f854 3b04 	ldr.w	r3, [r4], #4
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 8002a92:	4629      	mov	r1, r5
 8002a94:	a804      	add	r0, sp, #16
  osThreadDef(Task1, task1EntryFunction, osPriorityNormal, 0, 128);
 8002a96:	6033      	str	r3, [r6, #0]
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 8002a98:	f7fe fb2b 	bl	80010f2 <osThreadCreate>
 8002a9c:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <main+0xf8>)
  osThreadDef(task2, task2EntryFunction, osPriorityNormal, 0, 128);
 8002a9e:	ae09      	add	r6, sp, #36	; 0x24
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 8002aa0:	6018      	str	r0, [r3, #0]
  osThreadDef(task2, task2EntryFunction, osPriorityNormal, 0, 128);
 8002aa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aa4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002aa6:	6823      	ldr	r3, [r4, #0]
  task2Handle = osThreadCreate(osThread(task2), NULL);
 8002aa8:	4629      	mov	r1, r5
 8002aaa:	a809      	add	r0, sp, #36	; 0x24
  osThreadDef(task2, task2EntryFunction, osPriorityNormal, 0, 128);
 8002aac:	6033      	str	r3, [r6, #0]
  task2Handle = osThreadCreate(osThread(task2), NULL);
 8002aae:	f7fe fb20 	bl	80010f2 <osThreadCreate>
 8002ab2:	4b0a      	ldr	r3, [pc, #40]	; (8002adc <main+0xfc>)
 8002ab4:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8002ab6:	f7fe fb17 	bl	80010e8 <osKernelStart>
 8002aba:	e7fe      	b.n	8002aba <main+0xda>
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40011000 	.word	0x40011000
 8002ac4:	200021b0 	.word	0x200021b0
 8002ac8:	40013800 	.word	0x40013800
 8002acc:	08002929 	.word	0x08002929
 8002ad0:	08002da4 	.word	0x08002da4
 8002ad4:	200021f0 	.word	0x200021f0
 8002ad8:	200021ac 	.word	0x200021ac
 8002adc:	200021f4 	.word	0x200021f4

08002ae0 <HAL_UART_RxCpltCallback>:
  /* USER CODE END Callback01 */
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
	HAL_UART_Transmit_IT(&huart1, StartMessagge, TXSTARTMESSAGESIZE);
 8002ae0:	2212      	movs	r2, #18
 8002ae2:	4902      	ldr	r1, [pc, #8]	; (8002aec <HAL_UART_RxCpltCallback+0xc>)
 8002ae4:	4802      	ldr	r0, [pc, #8]	; (8002af0 <HAL_UART_RxCpltCallback+0x10>)
 8002ae6:	f7fe b9f7 	b.w	8000ed8 <HAL_UART_Transmit_IT>
 8002aea:	bf00      	nop
 8002aec:	20000008 	.word	0x20000008
 8002af0:	200021b0 	.word	0x200021b0

08002af4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8002af4:	6803      	ldr	r3, [r0, #0]
 8002af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002afa:	d101      	bne.n	8002b00 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8002afc:	f7fd bb3a 	b.w	8000174 <HAL_IncTick>
 8002b00:	4770      	bx	lr
	...

08002b04 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b04:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <HAL_MspInit+0x48>)
{
 8002b06:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b08:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b0a:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b0c:	f042 0201 	orr.w	r2, r2, #1
 8002b10:	619a      	str	r2, [r3, #24]
 8002b12:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b14:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b18:	f002 0201 	and.w	r2, r2, #1
 8002b1c:	9200      	str	r2, [sp, #0]
 8002b1e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b20:	69da      	ldr	r2, [r3, #28]
 8002b22:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b26:	61da      	str	r2, [r3, #28]
 8002b28:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b2a:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b30:	9301      	str	r3, [sp, #4]
 8002b32:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b34:	f7fd fb42 	bl	80001bc <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002b38:	4a05      	ldr	r2, [pc, #20]	; (8002b50 <HAL_MspInit+0x4c>)
 8002b3a:	6853      	ldr	r3, [r2, #4]
 8002b3c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002b40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b46:	b003      	add	sp, #12
 8002b48:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	40010000 	.word	0x40010000

08002b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b54:	b510      	push	{r4, lr}
 8002b56:	4604      	mov	r4, r0
 8002b58:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b5a:	2210      	movs	r2, #16
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	a802      	add	r0, sp, #8
 8002b60:	f000 f903 	bl	8002d6a <memset>
  if(huart->Instance==USART1)
 8002b64:	6822      	ldr	r2, [r4, #0]
 8002b66:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <HAL_UART_MspInit+0x80>)
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d130      	bne.n	8002bce <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b6c:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002b70:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b72:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b78:	619a      	str	r2, [r3, #24]
 8002b7a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7c:	4816      	ldr	r0, [pc, #88]	; (8002bd8 <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b7e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002b82:	9200      	str	r2, [sp, #0]
 8002b84:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b86:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b88:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8a:	f042 0204 	orr.w	r2, r2, #4
 8002b8e:	619a      	str	r2, [r3, #24]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	f003 0304 	and.w	r3, r3, #4
 8002b96:	9301      	str	r3, [sp, #4]
 8002b98:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b9e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba8:	f7fd fb90 	bl	80002cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002bac:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb0:	a902      	add	r1, sp, #8
 8002bb2:	4809      	ldr	r0, [pc, #36]	; (8002bd8 <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002bb4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bb6:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb8:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bba:	f7fd fb87 	bl	80002cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002bbe:	2025      	movs	r0, #37	; 0x25
 8002bc0:	4622      	mov	r2, r4
 8002bc2:	2105      	movs	r1, #5
 8002bc4:	f7fd fafa 	bl	80001bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bc8:	2025      	movs	r0, #37	; 0x25
 8002bca:	f7fd fb2b 	bl	8000224 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002bce:	b006      	add	sp, #24
 8002bd0:	bd10      	pop	{r4, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40013800 	.word	0x40013800
 8002bd8:	40010800 	.word	0x40010800

08002bdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bdc:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8002bde:	4601      	mov	r1, r0
{
 8002be0:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8002be2:	2200      	movs	r2, #0
 8002be4:	201c      	movs	r0, #28
 8002be6:	f7fd fae9 	bl	80001bc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8002bea:	201c      	movs	r0, #28
 8002bec:	f7fd fb1a 	bl	8000224 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002bf0:	4b14      	ldr	r3, [pc, #80]	; (8002c44 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bf2:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002bf4:	69da      	ldr	r2, [r3, #28]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bf6:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002bf8:	f042 0201 	orr.w	r2, r2, #1
 8002bfc:	61da      	str	r2, [r3, #28]
 8002bfe:	69db      	ldr	r3, [r3, #28]
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002c00:	4c11      	ldr	r4, [pc, #68]	; (8002c48 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	9302      	str	r3, [sp, #8]
 8002c08:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c0a:	f7fd fee3 	bl	80009d4 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002c0e:	f7fd fec1 	bl	8000994 <HAL_RCC_GetPCLK1Freq>
  htim2.Instance = TIM2;
 8002c12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c16:	6023      	str	r3, [r4, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8002c18:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002c1c:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002c1e:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <HAL_InitTick+0x70>)
 8002c20:	fbb0 f0f3 	udiv	r0, r0, r3
  htim2.Init.Prescaler = uwPrescalerValue;
  htim2.Init.ClockDivision = 0;
 8002c24:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002c26:	3801      	subs	r0, #1
  htim2.Init.Prescaler = uwPrescalerValue;
 8002c28:	6060      	str	r0, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8002c2a:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = 0;
 8002c2c:	6123      	str	r3, [r4, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c2e:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8002c30:	f7fd ffd8 	bl	8000be4 <HAL_TIM_Base_Init>
 8002c34:	b920      	cbnz	r0, 8002c40 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8002c36:	4620      	mov	r0, r4
 8002c38:	f7fd feeb 	bl	8000a12 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8002c3c:	b008      	add	sp, #32
 8002c3e:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8002c40:	2001      	movs	r0, #1
 8002c42:	e7fb      	b.n	8002c3c <HAL_InitTick+0x60>
 8002c44:	40021000 	.word	0x40021000
 8002c48:	200021f8 	.word	0x200021f8
 8002c4c:	000f4240 	.word	0x000f4240

08002c50 <NMI_Handler>:
 8002c50:	4770      	bx	lr

08002c52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c52:	e7fe      	b.n	8002c52 <HardFault_Handler>

08002c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c54:	e7fe      	b.n	8002c54 <MemManage_Handler>

08002c56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c56:	e7fe      	b.n	8002c56 <BusFault_Handler>

08002c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c58:	e7fe      	b.n	8002c58 <UsageFault_Handler>

08002c5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c5a:	4770      	bx	lr

08002c5c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c5c:	4801      	ldr	r0, [pc, #4]	; (8002c64 <TIM2_IRQHandler+0x8>)
 8002c5e:	f7fd bee7 	b.w	8000a30 <HAL_TIM_IRQHandler>
 8002c62:	bf00      	nop
 8002c64:	200021f8 	.word	0x200021f8

08002c68 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c68:	4801      	ldr	r0, [pc, #4]	; (8002c70 <USART1_IRQHandler+0x8>)
 8002c6a:	f7fe b995 	b.w	8000f98 <HAL_UART_IRQHandler>
 8002c6e:	bf00      	nop
 8002c70:	200021b0 	.word	0x200021b0

08002c74 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002c74:	4b0f      	ldr	r3, [pc, #60]	; (8002cb4 <SystemInit+0x40>)
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	f042 0201 	orr.w	r2, r2, #1
 8002c7c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002c7e:	6859      	ldr	r1, [r3, #4]
 8002c80:	4a0d      	ldr	r2, [pc, #52]	; (8002cb8 <SystemInit+0x44>)
 8002c82:	400a      	ands	r2, r1
 8002c84:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002c8c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c90:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c98:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002ca0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002ca2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002ca6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002ca8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cac:	4b03      	ldr	r3, [pc, #12]	; (8002cbc <SystemInit+0x48>)
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	f8ff0000 	.word	0xf8ff0000
 8002cbc:	e000ed00 	.word	0xe000ed00

08002cc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002cc0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002cc2:	e003      	b.n	8002ccc <LoopCopyDataInit>

08002cc4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002cc6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002cc8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002cca:	3104      	adds	r1, #4

08002ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002ccc:	480a      	ldr	r0, [pc, #40]	; (8002cf8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002cce:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002cd0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002cd2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002cd4:	d3f6      	bcc.n	8002cc4 <CopyDataInit>
  ldr r2, =_sbss
 8002cd6:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002cd8:	e002      	b.n	8002ce0 <LoopFillZerobss>

08002cda <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002cda:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002cdc:	f842 3b04 	str.w	r3, [r2], #4

08002ce0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002ce0:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002ce2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002ce4:	d3f9      	bcc.n	8002cda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ce6:	f7ff ffc5 	bl	8002c74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cea:	f000 f80f 	bl	8002d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cee:	f7ff fe77 	bl	80029e0 <main>
  bx lr
 8002cf2:	4770      	bx	lr
  ldr r3, =_sidata
 8002cf4:	08002e0c 	.word	0x08002e0c
  ldr r0, =_sdata
 8002cf8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002cfc:	20000024 	.word	0x20000024
  ldr r2, =_sbss
 8002d00:	20000024 	.word	0x20000024
  ldr r3, = _ebss
 8002d04:	20002238 	.word	0x20002238

08002d08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d08:	e7fe      	b.n	8002d08 <ADC1_2_IRQHandler>
	...

08002d0c <__libc_init_array>:
 8002d0c:	b570      	push	{r4, r5, r6, lr}
 8002d0e:	2500      	movs	r5, #0
 8002d10:	4e0c      	ldr	r6, [pc, #48]	; (8002d44 <__libc_init_array+0x38>)
 8002d12:	4c0d      	ldr	r4, [pc, #52]	; (8002d48 <__libc_init_array+0x3c>)
 8002d14:	1ba4      	subs	r4, r4, r6
 8002d16:	10a4      	asrs	r4, r4, #2
 8002d18:	42a5      	cmp	r5, r4
 8002d1a:	d109      	bne.n	8002d30 <__libc_init_array+0x24>
 8002d1c:	f000 f82e 	bl	8002d7c <_init>
 8002d20:	2500      	movs	r5, #0
 8002d22:	4e0a      	ldr	r6, [pc, #40]	; (8002d4c <__libc_init_array+0x40>)
 8002d24:	4c0a      	ldr	r4, [pc, #40]	; (8002d50 <__libc_init_array+0x44>)
 8002d26:	1ba4      	subs	r4, r4, r6
 8002d28:	10a4      	asrs	r4, r4, #2
 8002d2a:	42a5      	cmp	r5, r4
 8002d2c:	d105      	bne.n	8002d3a <__libc_init_array+0x2e>
 8002d2e:	bd70      	pop	{r4, r5, r6, pc}
 8002d30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d34:	4798      	blx	r3
 8002d36:	3501      	adds	r5, #1
 8002d38:	e7ee      	b.n	8002d18 <__libc_init_array+0xc>
 8002d3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d3e:	4798      	blx	r3
 8002d40:	3501      	adds	r5, #1
 8002d42:	e7f2      	b.n	8002d2a <__libc_init_array+0x1e>
 8002d44:	08002e04 	.word	0x08002e04
 8002d48:	08002e04 	.word	0x08002e04
 8002d4c:	08002e04 	.word	0x08002e04
 8002d50:	08002e08 	.word	0x08002e08

08002d54 <memcpy>:
 8002d54:	b510      	push	{r4, lr}
 8002d56:	1e43      	subs	r3, r0, #1
 8002d58:	440a      	add	r2, r1
 8002d5a:	4291      	cmp	r1, r2
 8002d5c:	d100      	bne.n	8002d60 <memcpy+0xc>
 8002d5e:	bd10      	pop	{r4, pc}
 8002d60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d68:	e7f7      	b.n	8002d5a <memcpy+0x6>

08002d6a <memset>:
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	4402      	add	r2, r0
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d100      	bne.n	8002d74 <memset+0xa>
 8002d72:	4770      	bx	lr
 8002d74:	f803 1b01 	strb.w	r1, [r3], #1
 8002d78:	e7f9      	b.n	8002d6e <memset+0x4>
	...

08002d7c <_init>:
 8002d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7e:	bf00      	nop
 8002d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d82:	bc08      	pop	{r3}
 8002d84:	469e      	mov	lr, r3
 8002d86:	4770      	bx	lr

08002d88 <_fini>:
 8002d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d8a:	bf00      	nop
 8002d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d8e:	bc08      	pop	{r3}
 8002d90:	469e      	mov	lr, r3
 8002d92:	4770      	bx	lr
